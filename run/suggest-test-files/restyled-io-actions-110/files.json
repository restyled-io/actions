[
  {
    "sha": "e57f7f8197677e30957b31b2d6bc978ba40e6785",
    "filename": ".github/workflows/restyled.yml",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/restyled-io/actions/blob/8672a7df4bc9edfea1ae062620328165196c11cf/.github%2Fworkflows%2Frestyled.yml",
    "raw_url": "https://github.com/restyled-io/actions/raw/8672a7df4bc9edfea1ae062620328165196c11cf/.github%2Fworkflows%2Frestyled.yml",
    "contents_url": "https://api.github.com/repos/restyled-io/actions/contents/.github%2Fworkflows%2Frestyled.yml?ref=8672a7df4bc9edfea1ae062620328165196c11cf",
    "patch": "@@ -18,7 +18,6 @@ jobs:\n       - uses: ./run\n         with:\n           suggestions: true\n-          show-patch: false\n           show-patch-command: false\n \n   restyled-demo:"
  },
  {
    "sha": "0666937248239456b8e2f3c9ff87f9ac889f8129",
    "filename": "run/dist/index.js",
    "status": "modified",
    "additions": 246,
    "deletions": 337,
    "changes": 583,
    "blob_url": "https://github.com/restyled-io/actions/blob/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fdist%2Findex.js",
    "raw_url": "https://github.com/restyled-io/actions/raw/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fdist%2Findex.js",
    "contents_url": "https://api.github.com/repos/restyled-io/actions/contents/run%2Fdist%2Findex.js?ref=8672a7df4bc9edfea1ae062620328165196c11cf",
    "patch": "@@ -38,97 +38,6 @@ async function queryReviewThreads(client, owner, repo, number) {\n }\n \n \n-/***/ }),\n-\n-/***/ 9734:\n-/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {\n-\n-\"use strict\";\n-\n-var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n-    if (k2 === undefined) k2 = k;\n-    var desc = Object.getOwnPropertyDescriptor(m, k);\n-    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n-      desc = { enumerable: true, get: function() { return m[k]; } };\n-    }\n-    Object.defineProperty(o, k2, desc);\n-}) : (function(o, m, k, k2) {\n-    if (k2 === undefined) k2 = k;\n-    o[k2] = m[k];\n-}));\n-var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n-    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n-}) : function(o, v) {\n-    o[\"default\"] = v;\n-});\n-var __importStar = (this && this.__importStar) || (function () {\n-    var ownKeys = function(o) {\n-        ownKeys = Object.getOwnPropertyNames || function (o) {\n-            var ar = [];\n-            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n-            return ar;\n-        };\n-        return ownKeys(o);\n-    };\n-    return function (mod) {\n-        if (mod && mod.__esModule) return mod;\n-        var result = {};\n-        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n-        __setModuleDefault(result, mod);\n-        return result;\n-    };\n-})();\n-Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n-exports.Hunks = void 0;\n-const NE = __importStar(__nccwpck_require__(1571));\n-class Hunks {\n-    map;\n-    lastHunk;\n-    lastLine;\n-    constructor(lines) {\n-        this.map = new Map();\n-        this.lastHunk = -99;\n-        this.lastLine = -99;\n-        lines.forEach((line) => this.add(line));\n-    }\n-    get(lineNumber) {\n-        return this.map.get(lineNumber) || null;\n-    }\n-    forEach(f) {\n-        this.hunks().forEach(f);\n-    }\n-    contain(hunk) {\n-        return this.hunks().some((x) => {\n-            return (NE.head(hunk).lineNumber >= NE.head(x).lineNumber &&\n-                NE.last(hunk).lineNumber <= NE.last(x).lineNumber);\n-        });\n-    }\n-    lines() {\n-        return this.hunks().flatMap((hunk) => {\n-            return NE.toList(hunk).map((x) => x.lineNumber);\n-        });\n-    }\n-    add(line) {\n-        const current = this.get(this.lastHunk);\n-        const isSameLine = line.lineNumber === this.lastLine;\n-        const isNextLine = line.lineNumber === this.lastLine + 1;\n-        if (current && (isSameLine || isNextLine)) {\n-            const updated = NE.append(current, NE.singleton(line));\n-            this.map.set(this.lastHunk, updated);\n-        }\n-        else {\n-            this.map.set(line.lineNumber, NE.singleton(line));\n-            this.lastHunk = line.lineNumber;\n-        }\n-        this.lastLine = line.lineNumber;\n-    }\n-    hunks() {\n-        return Array.from(this.map.values());\n-    }\n-}\n-exports.Hunks = Hunks;\n-\n-\n /***/ }),\n \n /***/ 6107:\n@@ -219,6 +128,39 @@ function cliArguments(inputs) {\n }\n \n \n+/***/ }),\n+\n+/***/ 670:\n+/***/ ((__unused_webpack_module, exports) => {\n+\n+\"use strict\";\n+\n+Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n+exports.last = last;\n+exports.group = group;\n+exports.groupBy = groupBy;\n+function last(xs) {\n+    return xs.slice(-1)[0] ?? null;\n+}\n+function group(xs) {\n+    return groupBy(xs, (a, b) => a === b);\n+}\n+function groupBy(xs, isEqual) {\n+    const go = (acc, x) => {\n+        const prevGroup = last(acc);\n+        if (prevGroup) {\n+            const prevElem = last(prevGroup);\n+            if (prevElem && isEqual(prevElem, x)) {\n+                prevGroup.push(x);\n+                return acc;\n+            }\n+        }\n+        return acc.concat([[x]]);\n+    };\n+    return xs.reduce(go, []);\n+}\n+\n+\n /***/ }),\n \n /***/ 5915:\n@@ -263,13 +205,12 @@ Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n const core = __importStar(__nccwpck_require__(7484));\n const github = __importStar(__nccwpck_require__(3228));\n const exec = __importStar(__nccwpck_require__(5236));\n-const review_comments_1 = __nccwpck_require__(7253);\n const inputs_1 = __nccwpck_require__(6107);\n-const pull_request_1 = __nccwpck_require__(4925);\n-const suggestions_1 = __nccwpck_require__(6017);\n-const patch_1 = __nccwpck_require__(8854);\n-const process_1 = __nccwpck_require__(1633);\n const outputs_1 = __nccwpck_require__(3914);\n+const process_1 = __nccwpck_require__(1633);\n+const pull_request_1 = __nccwpck_require__(4925);\n+const review_comments_1 = __nccwpck_require__(7253);\n+const suggest_1 = __nccwpck_require__(3146);\n function pullRequestDescription(number) {\n     return `\n Automated style fixes for #${number}, created by Restyled.\n@@ -336,11 +277,10 @@ async function run() {\n         }\n         if (inputs.suggestions && success) {\n             const resolved = await (0, review_comments_1.clearPriorSuggestions)(client, pr);\n-            if (pr.diff && differences) {\n+            if (differences) {\n+                const suggestions = (0, suggest_1.suggest)(pr.files, resolved, patch);\n                 let n = 0;\n-                const bases = (0, patch_1.parsePatches)(pr.diff);\n-                const patches = (0, patch_1.parsePatches)(patch);\n-                const ps = (0, suggestions_1.getSuggestions)(bases, patches, resolved).map((s) => {\n+                const ps = suggestions.map((s) => {\n                     if (s.skipReason) {\n                         const line = s.startLine !== s.endLine\n                             ? `${s.startLine}-${s.endLine}`\n@@ -501,40 +441,166 @@ function setOutputs(outputs) {\n \n /***/ }),\n \n-/***/ 8854:\n-/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {\n+/***/ 297:\n+/***/ ((__unused_webpack_module, exports) => {\n \n \"use strict\";\n \n-var __importDefault = (this && this.__importDefault) || function (mod) {\n-    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n-};\n Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n-exports.parsePatches = parsePatches;\n-const parse_git_patch_1 = __importDefault(__nccwpck_require__(2427));\n-const PATCH_BEGIN = /^From /;\n-function parsePatches(str) {\n-    const patches = [];\n-    let patchLines = [];\n-    const accumulate = () => {\n-        if (patchLines.length === 0) {\n+exports.parseGitPatches = parseGitPatches;\n+exports.parseGitPatch = parseGitPatch;\n+const hashRegex = /^From (\\S*)/;\n+const authorRegex = /^From:\\s?([^<].*[^>])?\\s+(<(.*)>)?/;\n+const fileNameRegex = /^diff --git \"?a\\/(.*)\"?\\s*\"?b\\/(.*)\"?/;\n+const fileLinesRegex = /^@@ -([0-9]*),?\\S* \\+([0-9]*),?/;\n+const similarityIndexRegex = /^similarity index /;\n+const addedFileModeRegex = /^new file mode /;\n+const deletedFileModeRegex = /^deleted file mode /;\n+function parseGitPatches(patches) {\n+    const lines = patches.split(\"\\n\");\n+    return splitIntoParts(lines, \"From \")\n+        .map((xs) => parseGitPatch(xs.join(\"\\n\")))\n+        .filter((x) => {\n+        return x;\n+    });\n+}\n+function parseGitPatch(patch) {\n+    if (typeof patch !== \"string\") {\n+        throw new Error(\"Expected first argument (patch) to be a string\");\n+    }\n+    const lines = patch.split(\"\\n\");\n+    const gitPatchMetaInfo = splitMetaInfo(patch, lines);\n+    if (!gitPatchMetaInfo)\n+        return null;\n+    const parsedPatch = {\n+        ...gitPatchMetaInfo,\n+        files: [],\n+    };\n+    splitIntoParts(lines, \"diff --git\").forEach((diff) => {\n+        const fileNameLine = diff.shift();\n+        if (!fileNameLine)\n+            return;\n+        const match3 = fileNameLine.match(fileNameRegex);\n+        if (!match3)\n             return;\n+        const [, a, b] = match3;\n+        const metaLine = diff.shift();\n+        if (!metaLine)\n+            return;\n+        const fileData = {\n+            added: false,\n+            deleted: false,\n+            beforeName: a.trim(),\n+            afterName: b.trim(),\n+            modifiedLines: [],\n+        };\n+        parsedPatch.files.push(fileData);\n+        if (addedFileModeRegex.test(metaLine)) {\n+            fileData.added = true;\n         }\n-        const parsed = (0, parse_git_patch_1.default)(patchLines.join(\"\\n\"));\n-        if (!parsed) {\n+        if (deletedFileModeRegex.test(metaLine)) {\n+            fileData.deleted = true;\n+        }\n+        if (similarityIndexRegex.test(metaLine)) {\n             return;\n         }\n-        patches.push(parsed);\n-        patchLines = [];\n+        splitIntoParts(diff, \"@@ \").forEach((lines) => {\n+            const fileLinesLine = lines.shift();\n+            if (!fileLinesLine)\n+                return;\n+            const match4 = fileLinesLine.match(fileLinesRegex);\n+            if (!match4)\n+                return;\n+            const [, a, b] = match4;\n+            let nA = parseInt(a);\n+            let nB = parseInt(b);\n+            lines.forEach((line) => {\n+                if (line === \"-- \") {\n+                    return;\n+                }\n+                if (line.startsWith(\"+\")) {\n+                    fileData.modifiedLines.push({\n+                        tag: \"added\",\n+                        addedLineNumber: nB,\n+                        line: line.substring(1),\n+                    });\n+                    nB++;\n+                }\n+                else if (line.startsWith(\"-\")) {\n+                    fileData.modifiedLines.push({\n+                        tag: \"removed\",\n+                        removedLineNumber: nA,\n+                        line: line.substring(1),\n+                    });\n+                    nA++;\n+                }\n+                else if (line.startsWith(\" \")) {\n+                    fileData.modifiedLines.push({\n+                        tag: \"context\",\n+                        addedLineNumber: nB,\n+                        removedLineNumber: nA,\n+                        line: line.substring(1),\n+                    });\n+                    nA++;\n+                    nB++;\n+                }\n+            });\n+        });\n+    });\n+    return parsedPatch;\n+}\n+function splitMetaInfo(patch, lines) {\n+    if (!/^From/g.test(patch)) {\n+        return {};\n+    }\n+    const hashLine = lines.shift();\n+    if (!hashLine)\n+        return null;\n+    const match1 = hashLine.match(hashRegex);\n+    if (!match1)\n+        return null;\n+    const [, hash] = match1;\n+    const authorLine = lines.shift();\n+    if (!authorLine)\n+        return null;\n+    const match2 = authorLine.match(authorRegex);\n+    if (!match2)\n+        return null;\n+    const [, authorName, , authorEmail] = match2;\n+    const dateLine = lines.shift();\n+    if (!dateLine)\n+        return null;\n+    const [, date] = dateLine.split(\"Date: \");\n+    const messageLine = lines.shift();\n+    if (!messageLine)\n+        return null;\n+    const [, message] = messageLine.split(\"Subject: \");\n+    return {\n+        hash,\n+        authorName,\n+        authorEmail,\n+        date,\n+        message,\n     };\n-    str.split(\"\\n\").forEach((line) => {\n-        if (line.match(PATCH_BEGIN)) {\n-            accumulate();\n+}\n+function splitIntoParts(lines, separator) {\n+    const parts = [];\n+    let currentPart;\n+    lines.forEach((line) => {\n+        if (line.startsWith(separator)) {\n+            if (currentPart) {\n+                parts.push(currentPart);\n+            }\n+            currentPart = [line];\n+        }\n+        else if (currentPart) {\n+            currentPart.push(line);\n         }\n-        patchLines.push(line);\n     });\n-    accumulate();\n-    return patches;\n+    if (currentPart) {\n+        parts.push(currentPart);\n+    }\n+    return parts;\n }\n \n \n@@ -671,16 +737,19 @@ async function getPullRequest(client, paths) {\n     }\n     const pullRequestJson = temp.path({ suffix: \".json\" });\n     fs.writeFileSync(pullRequestJson, JSON.stringify(pr));\n-    const restylePaths = paths.length === 0 ? await getPullRequestPaths(client, pr.number) : paths;\n-    const diff = await getPullRequestDiff(client, pr.number);\n+    const files = await client.paginate(client.rest.pulls.listFiles, {\n+        ...github.context.repo,\n+        pull_number: pr.number,\n+    });\n+    const restylePaths = paths.length === 0 ? files.map((f) => f.filename) : paths;\n     return {\n         number: pr.number,\n         title: pr.title,\n         headRef: pr.head.ref,\n         headSha: pr.head.sha,\n         restyleArgs: [\"--pull-request-json\", pullRequestJson].concat(restylePaths),\n         restyleDiffBase: base,\n-        diff,\n+        files,\n     };\n }\n function fakePullRequest(base, paths) {\n@@ -691,26 +760,9 @@ function fakePullRequest(base, paths) {\n         headSha: \"unknown\",\n         restyleArgs: paths,\n         restyleDiffBase: base,\n-        diff: null,\n+        files: [],\n     };\n }\n-async function getPullRequestPaths(client, number) {\n-    const files = await client.paginate(client.rest.pulls.listFiles, {\n-        ...github.context.repo,\n-        pull_number: number,\n-    });\n-    return files.map((f) => f.filename);\n-}\n-async function getPullRequestDiff(client, number) {\n-    const response = await client.rest.pulls.get({\n-        ...github.context.repo,\n-        pull_number: number,\n-        mediaType: {\n-            format: \"patch\",\n-        },\n-    });\n-    return response.data;\n-}\n async function getDiffBase() {\n     try {\n         const sha = await (0, process_1.readProcess)(\"git\", [\"rev-parse\", \"HEAD\"]);\n@@ -836,7 +888,7 @@ async function commentSuggestion(client, pullRequest, suggestion) {\n \n /***/ }),\n \n-/***/ 6017:\n+/***/ 3146:\n /***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {\n \n \"use strict\";\n@@ -875,62 +927,68 @@ var __importStar = (this && this.__importStar) || (function () {\n     };\n })();\n Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n-exports.getSuggestions = getSuggestions;\n-const hunk_1 = __nccwpck_require__(9734);\n+exports.suggest = suggest;\n+const list_1 = __nccwpck_require__(670);\n+const non_empty_1 = __nccwpck_require__(1571);\n const NE = __importStar(__nccwpck_require__(1571));\n-function getSuggestions(bases, patches, resolved) {\n-    const suggestions = [];\n-    const baseFiles = bases.flatMap((p) => p.files);\n-    patches.forEach((patch) => {\n-        patch.files.forEach((file) => {\n-            const baseFile = baseFiles.find((x) => x.afterName === file.afterName);\n-            if (!baseFile) {\n-                suggestions.push({\n-                    path: file.afterName,\n-                    description: (patch.message || \"\").replace(/^\\[PATCH] /, \"\"),\n-                    startLine: 0,\n-                    endLine: 0,\n-                    code: [],\n-                    skipReason: `Restyled file ${file.afterName} was not changed in the PR`,\n-                });\n-                return;\n-            }\n-            const baseAdds = new hunk_1.Hunks(baseFile.modifiedLines.filter((x) => x.added));\n-            const dels = new hunk_1.Hunks(file.modifiedLines.filter((x) => !x.added));\n-            const adds = new hunk_1.Hunks(file.modifiedLines.filter((x) => x.added));\n-            dels.forEach((del) => {\n-                const line = NE.head(del).lineNumber;\n-                const add = adds.get(line);\n-                const mkSkipped = (skipReason) => {\n+const parse_git_patch_1 = __nccwpck_require__(297);\n+function suggest(baseFiles, resolved, patch) {\n+    const patches = (0, parse_git_patch_1.parseGitPatches)(patch);\n+    return patches.flatMap((patch) => {\n+        return patch.files.flatMap((file) => {\n+            const groups = (0, list_1.groupBy)(file.modifiedLines, (a, b) => {\n+                return a.tag === b.tag || (a.tag === \"removed\" && b.tag === \"added\");\n+            });\n+            return groups.flatMap((group) => {\n+                const removed = getRemoveLineNumbers(group);\n+                if (!removed) {\n                     return {\n                         path: file.afterName,\n-                        description: (patch.message || \"\").replace(/^\\[PATCH] /, \"\"),\n-                        startLine: NE.head(del).lineNumber,\n-                        endLine: NE.last(del).lineNumber,\n-                        code: [],\n-                        skipReason,\n+                        description: (patch.message ?? \"\").replace(/\\[PATCH.*] /, \"\"),\n+                        code: getAddedLines(group),\n+                        startLine: 0,\n+                        endLine: 0,\n+                        skipReason: \"suggestion removed no lines\",\n                     };\n-                };\n+                }\n                 const suggestion = {\n                     path: file.afterName,\n-                    description: (patch.message || \"\").replace(/^\\[PATCH] /, \"\"),\n-                    startLine: NE.head(del).lineNumber,\n-                    endLine: NE.last(del).lineNumber,\n-                    code: add ? NE.toList(add).map((x) => x.line) : [],\n+                    description: (patch.message ?? \"\").replace(/\\[PATCH.*] /, \"\"),\n+                    code: getAddedLines(group),\n+                    startLine: NE.head(removed),\n+                    endLine: NE.last(removed),\n                 };\n-                if (!baseAdds.contain(del)) {\n-                    suggestions.push(mkSkipped(`suggestions can only be made on added lines`));\n-                    return;\n+                if (!isOnAddedLines(baseFiles, suggestion)) {\n+                    suggestion.skipReason = \"suggestions can only be made on added lines\";\n                 }\n                 if (resolved.some((r) => isSameLocation(r, suggestion))) {\n-                    suggestions.push(mkSkipped(`previously marked resolved`));\n-                    return;\n+                    suggestion.skipReason = \"previously marked resolved\";\n                 }\n-                suggestions.push(suggestion);\n+                return suggestion;\n             });\n         });\n     });\n-    return suggestions;\n+}\n+function getRemoveLineNumbers(lines) {\n+    const acc = [];\n+    lines.forEach((line) => {\n+        if (line.tag === \"removed\") {\n+            acc.push(line.removedLineNumber);\n+        }\n+    });\n+    return (0, non_empty_1.nonEmpty)(acc);\n+}\n+function getAddedLines(lines) {\n+    const acc = [];\n+    lines.forEach((line) => {\n+        if (line.tag === \"added\") {\n+            acc.push(line.line);\n+        }\n+    });\n+    return acc;\n+}\n+function isOnAddedLines(baseFiles, suggestion) {\n+    return true;\n }\n function isSameLocation(a, b) {\n     return (a.path === b.path && a.startLine == b.startLine && a.endLine == b.endLine);\n@@ -11714,155 +11772,6 @@ function onceStrict (fn) {\n }\n \n \n-/***/ }),\n-\n-/***/ 2427:\n-/***/ ((__unused_webpack_module, exports) => {\n-\n-\"use strict\";\n-\n-Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n-const hashRegex = /^From (\\S*)/;\n-const authorRegex = /^From:\\s?([^<].*[^>])?\\s+(<(.*)>)?/;\n-const fileNameRegex = /^diff --git \"?a\\/(.*)\"?\\s*\"?b\\/(.*)\"?/;\n-const fileLinesRegex = /^@@ -([0-9]*),?\\S* \\+([0-9]*),?/;\n-const similarityIndexRegex = /^similarity index /;\n-const addedFileModeRegex = /^new file mode /;\n-const deletedFileModeRegex = /^deleted file mode /;\n-function parseGitPatch(patch) {\n-    if (typeof patch !== 'string') {\n-        throw new Error('Expected first argument (patch) to be a string');\n-    }\n-    const lines = patch.split('\\n');\n-    const gitPatchMetaInfo = splitMetaInfo(patch, lines);\n-    if (!gitPatchMetaInfo)\n-        return null;\n-    const parsedPatch = {\n-        ...gitPatchMetaInfo,\n-        files: [],\n-    };\n-    splitIntoParts(lines, 'diff --git').forEach(diff => {\n-        const fileNameLine = diff.shift();\n-        if (!fileNameLine)\n-            return;\n-        const match3 = fileNameLine.match(fileNameRegex);\n-        if (!match3)\n-            return;\n-        const [, a, b] = match3;\n-        const metaLine = diff.shift();\n-        if (!metaLine)\n-            return;\n-        const fileData = {\n-            added: false,\n-            deleted: false,\n-            beforeName: a.trim(),\n-            afterName: b.trim(),\n-            modifiedLines: [],\n-        };\n-        parsedPatch.files.push(fileData);\n-        if (addedFileModeRegex.test(metaLine)) {\n-            fileData.added = true;\n-        }\n-        if (deletedFileModeRegex.test(metaLine)) {\n-            fileData.deleted = true;\n-        }\n-        if (similarityIndexRegex.test(metaLine)) {\n-            return;\n-        }\n-        splitIntoParts(diff, '@@ ').forEach(lines => {\n-            const fileLinesLine = lines.shift();\n-            if (!fileLinesLine)\n-                return;\n-            const match4 = fileLinesLine.match(fileLinesRegex);\n-            if (!match4)\n-                return;\n-            const [, a, b] = match4;\n-            let nA = parseInt(a) - 1;\n-            let nB = parseInt(b) - 1;\n-            lines.forEach(line => {\n-                nA++;\n-                nB++;\n-                if (line.startsWith('-- ')) {\n-                    return;\n-                }\n-                if (line.startsWith('+')) {\n-                    nA--;\n-                    fileData.modifiedLines.push({\n-                        added: true,\n-                        lineNumber: nB,\n-                        line: line.substring(1),\n-                    });\n-                }\n-                else if (line.startsWith('-')) {\n-                    nB--;\n-                    fileData.modifiedLines.push({\n-                        added: false,\n-                        lineNumber: nA,\n-                        line: line.substring(1),\n-                    });\n-                }\n-            });\n-        });\n-    });\n-    return parsedPatch;\n-}\n-function splitMetaInfo(patch, lines) {\n-    // Compatible with git output\n-    if (!/^From/g.test(patch)) {\n-        return {};\n-    }\n-    const hashLine = lines.shift();\n-    if (!hashLine)\n-        return null;\n-    const match1 = hashLine.match(hashRegex);\n-    if (!match1)\n-        return null;\n-    const [, hash] = match1;\n-    const authorLine = lines.shift();\n-    if (!authorLine)\n-        return null;\n-    const match2 = authorLine.match(authorRegex);\n-    if (!match2)\n-        return null;\n-    const [, authorName, , authorEmail] = match2;\n-    const dateLine = lines.shift();\n-    if (!dateLine)\n-        return null;\n-    const [, date] = dateLine.split('Date: ');\n-    const messageLine = lines.shift();\n-    if (!messageLine)\n-        return null;\n-    const [, message] = messageLine.split('Subject: ');\n-    return {\n-        hash,\n-        authorName,\n-        authorEmail,\n-        date,\n-        message,\n-    };\n-}\n-function splitIntoParts(lines, separator) {\n-    const parts = [];\n-    let currentPart;\n-    lines.forEach(line => {\n-        if (line.startsWith(separator)) {\n-            if (currentPart) {\n-                parts.push(currentPart);\n-            }\n-            currentPart = [line];\n-        }\n-        else if (currentPart) {\n-            currentPart.push(line);\n-        }\n-    });\n-    if (currentPart) {\n-        parts.push(currentPart);\n-    }\n-    return parts;\n-}\n-exports[\"default\"] = parseGitPatch;\n-\n-\n /***/ }),\n \n /***/ 9024:"
  },
  {
    "sha": "0c7cecb03ca12d12a9d38ba47739fecf88e37857",
    "filename": "run/example-patches/add-and-delete-file.patch",
    "status": "added",
    "additions": 32,
    "deletions": 0,
    "changes": 32,
    "blob_url": "https://github.com/restyled-io/actions/blob/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fexample-patches%2Fadd-and-delete-file.patch",
    "raw_url": "https://github.com/restyled-io/actions/raw/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fexample-patches%2Fadd-and-delete-file.patch",
    "contents_url": "https://api.github.com/repos/restyled-io/actions/contents/run%2Fexample-patches%2Fadd-and-delete-file.patch?ref=8672a7df4bc9edfea1ae062620328165196c11cf",
    "patch": "@@ -0,0 +1,32 @@\n+From 74d652cd9cda9849591d1c414caae0af23b19c8d Mon Sep 17 00:00:00 2001\n+From: =?UTF-8?q?David=20H=C3=A9rault?= <dherault@gmail.com>\n+Date: Mon, 27 Jan 2020 17:36:29 +0100\n+Subject: [PATCH] Rename and edit README\n+\n+---\n+ README.md  | 3 ---\n+ README.mdx | 3 +++\n+ 2 files changed, 3 insertions(+), 3 deletions(-)\n+ delete mode 100644 README.md\n+ create mode 100644 README.mdx\n+\n+diff --git a/README.md b/README.md\n+deleted file mode 100644\n+index e0b718c..0000000\n+--- a/README.md\n++++ /dev/null\n+@@ -1,3 +0,0 @@\n+-# stars-in-motion\n+-\n+-A canvas full of stars\n+diff --git a/README.mdx b/README.mdx\n+new file mode 100644\n+index 0000000..35af58f\n+--- /dev/null\n++++ b/README.mdx\n+@@ -0,0 +1,3 @@\n++# stars-in-motion\n++\n++A canvas full of stars.\n+-- \n+2.21.1 (Apple Git-122.3)"
  },
  {
    "sha": "4ed6ed2283209305b7316d070eccfb49f2bc4dcb",
    "filename": "run/example-patches/complex.patch",
    "status": "added",
    "additions": 1668,
    "deletions": 0,
    "changes": 1668,
    "blob_url": "https://github.com/restyled-io/actions/blob/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fexample-patches%2Fcomplex.patch",
    "raw_url": "https://github.com/restyled-io/actions/raw/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fexample-patches%2Fcomplex.patch",
    "contents_url": "https://api.github.com/repos/restyled-io/actions/contents/run%2Fexample-patches%2Fcomplex.patch?ref=8672a7df4bc9edfea1ae062620328165196c11cf",
    "patch": "@@ -0,0 +1,1668 @@\n+From e54cdc33da095bebd6c6bf0d2cc502bb7549b072 Mon Sep 17 00:00:00 2001\n+From: =?UTF-8?q?David=20H=C3=A9rault?= <dherault@gmail.com>\n+Date: Sat, 22 Jun 2019 18:41:22 +0200\n+Subject: [PATCH] Lint and rename folders\n+\n+---\n+ .eslintignore                                 |   5 +-\n+ .eslintrc.js                                  |   4 +\n+ manual_test_nodejs/handler.js                 |   3 +-\n+ manual_test_nodejs/subprocess.js              |   1 -\n+ .../RouteSelection/handler.js                 |  31 ++\n+ .../package-lock.json                         |   0\n+ .../package.json                              |   0\n+ .../scripts/deploy_to_aws.sh                  |   0\n+ .../scripts/deploy_to_offline.sh              |   0\n+ .../scripts/serverless..yml                   |   0\n+ .../scripts/serverless.aws.yml                |   0\n+ .../scripts/serverless.offline.yml            |   0\n+ .../serverless.yml                            |   0\n+ .../RouteSelection/test/e2e/ws.e2e.js         |  59 +++\n+ .../test/support/WebSocketTester.js           |  62 +++\n+ manual_test_websocket/main/handler.js         | 131 +++++++\n+ .../package-lock.json                         |   0\n+ .../package.json                              |   0\n+ .../scripts/deploy_to_aws.sh                  |   0\n+ .../scripts/deploy_to_offline.sh              |   0\n+ .../scripts/serverless..yml                   |   0\n+ .../scripts/serverless.aws.yml                |   0\n+ .../scripts/serverless.offline.yml            |   0\n+ .../serverless.yml                            |   0\n+ manual_test_websocket/main/test/e2e/ws.e2e.js | 360 ++++++++++++++++++\n+ .../main/test/support/WebSocketTester.js      |  62 +++\n+ .../handler.js                                |  37 --\n+ .../test/e2e/ws.e2e.js                        |  53 ---\n+ .../test/support/WebSocketTester.js           |  62 ---\n+ .../manual_test_websocket_main/handler.js     | 150 --------\n+ .../test/e2e/ws.e2e.js                        | 342 -----------------\n+ .../test/support/WebSocketTester.js           |  60 ---\n+ 32 files changed, 711 insertions(+), 711 deletions(-)\n+ create mode 100644 manual_test_websocket/RouteSelection/handler.js\n+ rename manual_test_websocket/{manual_test_websocket_RouteSelection => RouteSelection}/package-lock.json (100%)\n+ rename manual_test_websocket/{manual_test_websocket_RouteSelection => RouteSelection}/package.json (100%)\n+ rename manual_test_websocket/{manual_test_websocket_RouteSelection => RouteSelection}/scripts/deploy_to_aws.sh (100%)\n+ rename manual_test_websocket/{manual_test_websocket_RouteSelection => RouteSelection}/scripts/deploy_to_offline.sh (100%)\n+ rename manual_test_websocket/{manual_test_websocket_RouteSelection => RouteSelection}/scripts/serverless..yml (100%)\n+ rename manual_test_websocket/{manual_test_websocket_RouteSelection => RouteSelection}/scripts/serverless.aws.yml (100%)\n+ rename manual_test_websocket/{manual_test_websocket_RouteSelection => RouteSelection}/scripts/serverless.offline.yml (100%)\n+ rename manual_test_websocket/{manual_test_websocket_RouteSelection => RouteSelection}/serverless.yml (100%)\n+ create mode 100644 manual_test_websocket/RouteSelection/test/e2e/ws.e2e.js\n+ create mode 100644 manual_test_websocket/RouteSelection/test/support/WebSocketTester.js\n+ create mode 100644 manual_test_websocket/main/handler.js\n+ rename manual_test_websocket/{manual_test_websocket_main => main}/package-lock.json (100%)\n+ rename manual_test_websocket/{manual_test_websocket_main => main}/package.json (100%)\n+ rename manual_test_websocket/{manual_test_websocket_main => main}/scripts/deploy_to_aws.sh (100%)\n+ rename manual_test_websocket/{manual_test_websocket_main => main}/scripts/deploy_to_offline.sh (100%)\n+ rename manual_test_websocket/{manual_test_websocket_main => main}/scripts/serverless..yml (100%)\n+ rename manual_test_websocket/{manual_test_websocket_main => main}/scripts/serverless.aws.yml (100%)\n+ rename manual_test_websocket/{manual_test_websocket_main => main}/scripts/serverless.offline.yml (100%)\n+ rename manual_test_websocket/{manual_test_websocket_main => main}/serverless.yml (100%)\n+ create mode 100644 manual_test_websocket/main/test/e2e/ws.e2e.js\n+ create mode 100644 manual_test_websocket/main/test/support/WebSocketTester.js\n+ delete mode 100644 manual_test_websocket/manual_test_websocket_RouteSelection/handler.js\n+ delete mode 100644 manual_test_websocket/manual_test_websocket_RouteSelection/test/e2e/ws.e2e.js\n+ delete mode 100644 manual_test_websocket/manual_test_websocket_RouteSelection/test/support/WebSocketTester.js\n+ delete mode 100644 manual_test_websocket/manual_test_websocket_main/handler.js\n+ delete mode 100644 manual_test_websocket/manual_test_websocket_main/test/e2e/ws.e2e.js\n+ delete mode 100644 manual_test_websocket/manual_test_websocket_main/test/support/WebSocketTester.js\n+\n+diff --git a/.eslintignore b/.eslintignore\n+index 211df65..cf70988 100644\n+--- a/.eslintignore\n++++ b/.eslintignore\n+@@ -1,4 +1 @@\n+-manual_test_nodejs\n+-manual_test_python\n+-manual_test_ruby\n+-manual_test_websocket\n++**/node_modules\n+diff --git a/.eslintrc.js b/.eslintrc.js\n+index 5c7d6c5..cf14cb5 100644\n+--- a/.eslintrc.js\n++++ b/.eslintrc.js\n+@@ -21,4 +21,8 @@ if (env.TRAVIS && platform === 'win32') {\n+ module.exports = {\n+   extends: 'dherault',\n+   rules,\n++  env: {\n++    node: true,\n++    mocha: true,\n++  },\n+ };\n+diff --git a/manual_test_nodejs/handler.js b/manual_test_nodejs/handler.js\n+index 568b4dc..12b454a 100644\n+--- a/manual_test_nodejs/handler.js\n++++ b/manual_test_nodejs/handler.js\n+@@ -1,4 +1,3 @@\n+-'use strict';\n+ \n+ module.exports.hello = (event, context, callback) => {\n+   const response = {\n+@@ -28,7 +27,7 @@ module.exports.rejectedPromise = (event, context, callback) => {\n+   callback(null, response);\n+ };\n+ \n+-module.exports.authFunction = (event, context, callback) => {\n++module.exports.authFunction = (event, context) => {\n+   context.succeed({\n+     principalId: 'xxxxxxx', // the principal user identification associated with the token send by the client\n+     policyDocument: {\n+diff --git a/manual_test_nodejs/subprocess.js b/manual_test_nodejs/subprocess.js\n+index 9132207..7794c64 100644\n+--- a/manual_test_nodejs/subprocess.js\n++++ b/manual_test_nodejs/subprocess.js\n+@@ -1,4 +1,3 @@\n+-'use strict';\n+ \n+ const { exec } = require('child_process');\n+ \n+diff --git a/manual_test_websocket/RouteSelection/handler.js b/manual_test_websocket/RouteSelection/handler.js\n+new file mode 100644\n+index 0000000..d43ffeb\n+--- /dev/null\n++++ b/manual_test_websocket/RouteSelection/handler.js\n+@@ -0,0 +1,31 @@\n++const AWS = require('aws-sdk');\n++\n++const successfullResponse = {\n++  statusCode: 200,\n++  body: 'Request is OK.',\n++};\n++\n++module.exports.echo = async (event, context) => {\n++  const action = JSON.parse(event.body);\n++\n++  await sendToClient(action.message, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context));\n++\n++  return successfullResponse;\n++};\n++\n++const newAWSApiGatewayManagementApi = event => {\n++  let endpoint = event.apiGatewayUrl;\n++\n++  if (!endpoint) endpoint = `${event.requestContext.domainName}/${event.requestContext.stage}`;\n++  const apiVersion = '2018-11-29';\n++\n++  return new AWS.ApiGatewayManagementApi({ apiVersion, endpoint });\n++};\n++\n++const sendToClient = (data, connectionId, apigwManagementApi) => {\n++  // console.log(`sendToClient:${connectionId}`);\n++  let sendee = data;\n++  if (typeof data === 'object') sendee = JSON.stringify(data);\n++\n++  return apigwManagementApi.postToConnection({ ConnectionId: connectionId, Data: sendee }).promise();\n++};\n+diff --git a/manual_test_websocket/manual_test_websocket_RouteSelection/package-lock.json b/manual_test_websocket/RouteSelection/package-lock.json\n+similarity index 100%\n+rename from manual_test_websocket/manual_test_websocket_RouteSelection/package-lock.json\n+rename to manual_test_websocket/RouteSelection/package-lock.json\n+diff --git a/manual_test_websocket/manual_test_websocket_RouteSelection/package.json b/manual_test_websocket/RouteSelection/package.json\n+similarity index 100%\n+rename from manual_test_websocket/manual_test_websocket_RouteSelection/package.json\n+rename to manual_test_websocket/RouteSelection/package.json\n+diff --git a/manual_test_websocket/manual_test_websocket_RouteSelection/scripts/deploy_to_aws.sh b/manual_test_websocket/RouteSelection/scripts/deploy_to_aws.sh\n+similarity index 100%\n+rename from manual_test_websocket/manual_test_websocket_RouteSelection/scripts/deploy_to_aws.sh\n+rename to manual_test_websocket/RouteSelection/scripts/deploy_to_aws.sh\n+diff --git a/manual_test_websocket/manual_test_websocket_RouteSelection/scripts/deploy_to_offline.sh b/manual_test_websocket/RouteSelection/scripts/deploy_to_offline.sh\n+similarity index 100%\n+rename from manual_test_websocket/manual_test_websocket_RouteSelection/scripts/deploy_to_offline.sh\n+rename to manual_test_websocket/RouteSelection/scripts/deploy_to_offline.sh\n+diff --git a/manual_test_websocket/manual_test_websocket_RouteSelection/scripts/serverless..yml b/manual_test_websocket/RouteSelection/scripts/serverless..yml\n+similarity index 100%\n+rename from manual_test_websocket/manual_test_websocket_RouteSelection/scripts/serverless..yml\n+rename to manual_test_websocket/RouteSelection/scripts/serverless..yml\n+diff --git a/manual_test_websocket/manual_test_websocket_RouteSelection/scripts/serverless.aws.yml b/manual_test_websocket/RouteSelection/scripts/serverless.aws.yml\n+similarity index 100%\n+rename from manual_test_websocket/manual_test_websocket_RouteSelection/scripts/serverless.aws.yml\n+rename to manual_test_websocket/RouteSelection/scripts/serverless.aws.yml\n+diff --git a/manual_test_websocket/manual_test_websocket_RouteSelection/scripts/serverless.offline.yml b/manual_test_websocket/RouteSelection/scripts/serverless.offline.yml\n+similarity index 100%\n+rename from manual_test_websocket/manual_test_websocket_RouteSelection/scripts/serverless.offline.yml\n+rename to manual_test_websocket/RouteSelection/scripts/serverless.offline.yml\n+diff --git a/manual_test_websocket/manual_test_websocket_RouteSelection/serverless.yml b/manual_test_websocket/RouteSelection/serverless.yml\n+similarity index 100%\n+rename from manual_test_websocket/manual_test_websocket_RouteSelection/serverless.yml\n+rename to manual_test_websocket/RouteSelection/serverless.yml\n+diff --git a/manual_test_websocket/RouteSelection/test/e2e/ws.e2e.js b/manual_test_websocket/RouteSelection/test/e2e/ws.e2e.js\n+new file mode 100644\n+index 0000000..fcd11c0\n+--- /dev/null\n++++ b/manual_test_websocket/RouteSelection/test/e2e/ws.e2e.js\n+@@ -0,0 +1,59 @@\n++/* eslint-disable import/no-extraneous-dependencies */\n++\n++const chai = require('chai');\n++\n++const WebSocketTester = require('../support/WebSocketTester');\n++\n++const expect = chai.expect;\n++const endpoint = process.env.npm_config_endpoint || 'ws://localhost:3005';\n++const timeout = process.env.npm_config_timeout ? parseInt(process.env.npm_config_timeout) : 1000;\n++\n++describe('serverless', () => {\n++  describe('with WebSocket support', () => {\n++    let clients = [];\n++\n++    const createWebSocket = async qs => {\n++      const ws = new WebSocketTester();\n++      let url = endpoint;\n++\n++      if (qs) url = `${endpoint}?${qs}`;\n++\n++      await ws.open(url);\n++\n++      clients.push(ws);\n++\n++      return ws;\n++    };\n++\n++    beforeEach(() => {\n++      clients = [];\n++    });\n++\n++    afterEach(async () => {\n++      await Promise.all(clients.map(async (ws, i) => {\n++        const n = ws.countUnrecived();\n++\n++        if (n > 0) {\n++          console.log(`unreceived:[i=${i}]`);\n++          (await ws.receive(n)).forEach(m => console.log(m));\n++        }\n++\n++        expect(n).to.equal(0);\n++        ws.close();\n++      }));\n++\n++      clients = [];\n++    });\n++\n++    it('should call action \\'echo\\' handler located at service.do', async () => {\n++      const ws = await createWebSocket();\n++      const now = `${Date.now()}`;\n++      const payload = JSON.stringify({ service:{ do:'echo' }, message:now });\n++\n++      ws.send(payload);\n++\n++      expect(await ws.receive1()).to.equal(`${now}`);\n++    }).timeout(timeout);\n++\n++  });\n++});\n+diff --git a/manual_test_websocket/RouteSelection/test/support/WebSocketTester.js b/manual_test_websocket/RouteSelection/test/support/WebSocketTester.js\n+new file mode 100644\n+index 0000000..aaeff5a\n+--- /dev/null\n++++ b/manual_test_websocket/RouteSelection/test/support/WebSocketTester.js\n+@@ -0,0 +1,62 @@\n++/* eslint-disable import/no-extraneous-dependencies */\n++const WebSocket = require('ws');\n++\n++class WebSocketTester {\n++  constructor() {\n++    this.messages = []; this.receivers = [];\n++  }\n++\n++  open(url) {\n++    if (this.ws != null) return;\n++    const ws = this.ws = new WebSocket(url);\n++    ws.on('message', message => {\n++      // console.log('Received: '+message);\n++      if (this.receivers.length > 0) this.receivers.shift()(message);\n++      else this.messages.push(message);\n++    });\n++\n++    return new Promise(resolve => {\n++      ws.on('open', () => {\n++        resolve(true);\n++      });\n++    });\n++  }\n++\n++  send(data) {\n++    this.ws.send(data);\n++  }\n++\n++  receive1() {\n++    return new Promise(resolve => {\n++      if (this.messages.length > 0) resolve(this.messages.shift());\n++      else this.receivers.push(resolve);\n++    });\n++  }\n++\n++  receive(n) {\n++    return new Promise(resolve => {\n++      const messages = [];\n++      for (let i = 0; i < n; i += 1) {\n++        this.receive1().then(message => {\n++          messages[i] = message;\n++          if (i === n - 1) resolve(messages);\n++        });\n++      }\n++    });\n++  }\n++\n++  skip() {\n++    if (this.messages.length > 0) this.messages.shift();\n++    else this.receivers.push(() => {});\n++  }\n++\n++  countUnrecived() {\n++    return this.messages.length;\n++  }\n++\n++  close() {\n++    if (this.ws != null) this.ws.close();\n++  }\n++}\n++\n++module.exports = WebSocketTester;\n+diff --git a/manual_test_websocket/main/handler.js b/manual_test_websocket/main/handler.js\n+new file mode 100644\n+index 0000000..58c4d7d\n+--- /dev/null\n++++ b/manual_test_websocket/main/handler.js\n+@@ -0,0 +1,131 @@\n++const AWS = require('aws-sdk');\n++\n++const ddb = (() => {\n++  if (process.env.IS_OFFLINE) return new AWS.DynamoDB.DocumentClient({ region: 'localhost', endpoint: 'http://localhost:8000' });\n++\n++  return new AWS.DynamoDB.DocumentClient();\n++})();\n++\n++const successfullResponse = {\n++  statusCode: 200,\n++  body: 'Request is OK.',\n++};\n++\n++module.exports.connect = async (event, context) => {\n++  // console.log('connect:');\n++  const listener = await ddb.get({ TableName:'listeners', Key:{ name:'default' } }).promise();\n++\n++  if (listener.Item) {\n++    const timeout = new Promise(resolve => setTimeout(resolve, 100));\n++    const send = sendToClient( // sendToClient won't return on AWS when client doesn't exits so we set a timeout\n++      JSON.stringify({ action:'update', event:'connect', info:{ id:event.requestContext.connectionId, event:{ ...event, apiGatewayUrl:`${event.apiGatewayUrl}` }, context } }),\n++      listener.Item.id,\n++      newAWSApiGatewayManagementApi(event, context)).catch(() => {});\n++    await Promise.race([send, timeout]);\n++  }\n++\n++  return successfullResponse;\n++};\n++\n++// module.export.auth = (event, context, callback) => {\n++//   //console.log('auth:');\n++//   const token = event.headers[\"Authorization\"];\n++\n++//   if ('deny'===token) callback(null, generatePolicy('user', 'Deny', event.methodArn));\n++//   else callback(null, generatePolicy('user', 'Allow', event.methodArn));;\n++// };\n++\n++module.exports.disconnect = async (event, context) => {\n++  const listener = await ddb.get({ TableName:'listeners', Key:{ name:'default' } }).promise();\n++  if (listener.Item) await sendToClient(JSON.stringify({ action:'update', event:'disconnect', info:{ id:event.requestContext.connectionId, event:{ ...event, apiGatewayUrl:`${event.apiGatewayUrl}` }, context } }), listener.Item.id, newAWSApiGatewayManagementApi(event, context)).catch(() => {});\n++\n++  return successfullResponse;\n++};\n++\n++module.exports.defaultHandler = async (event, context) => {\n++  await sendToClient(`Error: No Supported Action in Payload '${event.body}'`, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err => console.log(err));\n++\n++  return successfullResponse;\n++};\n++\n++module.exports.getClientInfo = async (event, context) => {\n++  // console.log('getClientInfo:');\n++  await sendToClient({ action:'update', event:'client-info', info:{ id:event.requestContext.connectionId } }, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err => console.log(err));\n++\n++  return successfullResponse;\n++};\n++\n++module.exports.getCallInfo = async (event, context) => {\n++  await sendToClient({ action:'update', event:'call-info', info:{ event:{ ...event, apiGatewayUrl:`${event.apiGatewayUrl}` }, context } }, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err => console.log(err));\n++\n++  return successfullResponse;\n++};\n++\n++module.exports.makeError = async () => {\n++  const obj = null;\n++  obj.non.non = 1;\n++\n++  return successfullResponse;\n++};\n++\n++module.exports.replyViaCallback = (event, context, callback) => {\n++  sendToClient({ action:'update', event:'reply-via-callback' }, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err => console.log(err));\n++  callback();\n++};\n++\n++module.exports.replyErrorViaCallback = (event, context, callback) => callback('error error error');\n++\n++module.exports.multiCall1 = async (event, context) => {\n++  await sendToClient({ action:'update', event:'made-call-1' }, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err => console.log(err));\n++\n++  return successfullResponse;\n++};\n++\n++module.exports.multiCall2 = async (event, context) => {\n++  await sendToClient({ action:'update', event:'made-call-2' }, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err => console.log(err));\n++\n++  return successfullResponse;\n++};\n++\n++module.exports.send = async (event, context) => {\n++  const action = JSON.parse(event.body);\n++  const sents = [];\n++  action.clients.forEach(connectionId => {\n++    const sent = sendToClient(action.data, connectionId, newAWSApiGatewayManagementApi(event, context));\n++    sents.push(sent);\n++  });\n++  const noErr = await Promise.all(sents).then(() => true).catch(() => false);\n++  if (!noErr) await sendToClient('Error: Could not Send all Messages', event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context));\n++\n++  return successfullResponse;\n++};\n++\n++module.exports.registerListener = async (event, context) => {\n++  await ddb.put({ TableName:'listeners', Item:{ name:'default', id:event.requestContext.connectionId } }).promise();\n++  await sendToClient({ action:'update', event:'register-listener', info:{ id:event.requestContext.connectionId } }, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err => console.log(err));\n++\n++  return successfullResponse;\n++};\n++\n++module.exports.deleteListener = async () => {\n++  await ddb.delete({ TableName:'listeners', Key:{ name:'default' } }).promise();\n++\n++  return successfullResponse;\n++};\n++\n++const newAWSApiGatewayManagementApi = event => {\n++  let endpoint = event.apiGatewayUrl;\n++\n++  if (!endpoint) endpoint = `${event.requestContext.domainName}/${event.requestContext.stage}`;\n++  const apiVersion = '2018-11-29';\n++\n++  return new AWS.ApiGatewayManagementApi({ apiVersion, endpoint });\n++};\n++\n++const sendToClient = (data, connectionId, apigwManagementApi) => {\n++  // console.log(`sendToClient:${connectionId}`);\n++  let sendee = data;\n++  if (typeof data === 'object') sendee = JSON.stringify(data);\n++\n++  return apigwManagementApi.postToConnection({ ConnectionId: connectionId, Data: sendee }).promise();\n++};\n+diff --git a/manual_test_websocket/manual_test_websocket_main/package-lock.json b/manual_test_websocket/main/package-lock.json\n+similarity index 100%\n+rename from manual_test_websocket/manual_test_websocket_main/package-lock.json\n+rename to manual_test_websocket/main/package-lock.json\n+diff --git a/manual_test_websocket/manual_test_websocket_main/package.json b/manual_test_websocket/main/package.json\n+similarity index 100%\n+rename from manual_test_websocket/manual_test_websocket_main/package.json\n+rename to manual_test_websocket/main/package.json\n+diff --git a/manual_test_websocket/manual_test_websocket_main/scripts/deploy_to_aws.sh b/manual_test_websocket/main/scripts/deploy_to_aws.sh\n+similarity index 100%\n+rename from manual_test_websocket/manual_test_websocket_main/scripts/deploy_to_aws.sh\n+rename to manual_test_websocket/main/scripts/deploy_to_aws.sh\n+diff --git a/manual_test_websocket/manual_test_websocket_main/scripts/deploy_to_offline.sh b/manual_test_websocket/main/scripts/deploy_to_offline.sh\n+similarity index 100%\n+rename from manual_test_websocket/manual_test_websocket_main/scripts/deploy_to_offline.sh\n+rename to manual_test_websocket/main/scripts/deploy_to_offline.sh\n+diff --git a/manual_test_websocket/manual_test_websocket_main/scripts/serverless..yml b/manual_test_websocket/main/scripts/serverless..yml\n+similarity index 100%\n+rename from manual_test_websocket/manual_test_websocket_main/scripts/serverless..yml\n+rename to manual_test_websocket/main/scripts/serverless..yml\n+diff --git a/manual_test_websocket/manual_test_websocket_main/scripts/serverless.aws.yml b/manual_test_websocket/main/scripts/serverless.aws.yml\n+similarity index 100%\n+rename from manual_test_websocket/manual_test_websocket_main/scripts/serverless.aws.yml\n+rename to manual_test_websocket/main/scripts/serverless.aws.yml\n+diff --git a/manual_test_websocket/manual_test_websocket_main/scripts/serverless.offline.yml b/manual_test_websocket/main/scripts/serverless.offline.yml\n+similarity index 100%\n+rename from manual_test_websocket/manual_test_websocket_main/scripts/serverless.offline.yml\n+rename to manual_test_websocket/main/scripts/serverless.offline.yml\n+diff --git a/manual_test_websocket/manual_test_websocket_main/serverless.yml b/manual_test_websocket/main/serverless.yml\n+similarity index 100%\n+rename from manual_test_websocket/manual_test_websocket_main/serverless.yml\n+rename to manual_test_websocket/main/serverless.yml\n+diff --git a/manual_test_websocket/main/test/e2e/ws.e2e.js b/manual_test_websocket/main/test/e2e/ws.e2e.js\n+new file mode 100644\n+index 0000000..60f8a37\n+--- /dev/null\n++++ b/manual_test_websocket/main/test/e2e/ws.e2e.js\n+@@ -0,0 +1,360 @@\n++/* eslint-disable import/no-extraneous-dependencies */\n++/* eslint-disable no-unused-expressions */\n++const chai = require('chai');\n++const chaiHttp = require('chai-http');\n++\n++chai.use(chaiHttp);\n++const expect = chai.expect;\n++const aws4 = require('aws4');\n++const awscred = require('awscred');\n++const moment = require('moment');\n++\n++const endpoint = process.env.npm_config_endpoint || 'ws://localhost:3001';\n++const timeout = process.env.npm_config_timeout ? parseInt(process.env.npm_config_timeout) : 1000;\n++const WebSocketTester = require('../support/WebSocketTester');\n++\n++describe('serverless', () => {\n++  describe('with WebSocket support', () => {\n++    let clients = []; let req = null; let cred = null;\n++    const createWebSocket = async qs => {\n++      const ws = new WebSocketTester();\n++      let url = endpoint;\n++      if (qs) url = `${endpoint}?${qs}`;\n++      await ws.open(url);\n++      clients.push(ws);\n++\n++      return ws;\n++    };\n++    const createClient = async qs => {\n++      const ws = await createWebSocket(qs);\n++      ws.send(JSON.stringify({ action:'getClientInfo' }));\n++      const json = await ws.receive1();\n++      const id = JSON.parse(json).info.id;\n++\n++      return { ws, id };\n++    };\n++    before(async () => {\n++      req = chai.request(`${endpoint.replace('ws://', 'http://').replace('wss://', 'https://')}`).keepOpen();\n++      // req=chai.request('http://localhost:3001/dev').keepOpen();\n++      cred = await new Promise((resolve, reject) => {\n++        awscred.loadCredentials((err, data) => {\n++          if (err) reject(err); else resolve(data);\n++        });\n++      });\n++    });\n++\n++    beforeEach(() => {\n++      clients = [];\n++    });\n++    afterEach(async () => {\n++      await Promise.all(clients.map(async (ws, i) => {\n++        const n = ws.countUnrecived();\n++\n++        if (n > 0) {\n++          console.log(`unreceived:[i=${i}]`);\n++          (await ws.receive(n)).forEach(m => console.log(m));\n++        }\n++\n++        expect(n).to.equal(0);\n++        ws.close();\n++      }));\n++      clients = [];\n++    });\n++\n++    it('should request to upgade to WebSocket when receving an HTTP request', async () => {\n++      const req = chai.request(`${endpoint.replace('ws://', 'http://').replace('wss://', 'https://')}`).keepOpen();\n++      let res = await req.get(`/${Date.now()}`);// .set('Authorization', user.accessToken);\n++\n++      expect(res).to.have.status(426);\n++\n++      res = await req.get(`/${Date.now()}/${Date.now()}`);// .set('Authorization', user.accessToken);\n++\n++      expect(res).to.have.status(426);\n++    }).timeout(timeout);\n++\n++    it('should open a WebSocket', async () => {\n++      const ws = await createWebSocket();\n++      expect(ws).not.to.be.undefined;\n++    }).timeout(timeout);\n++\n++    it('should receive client connection info', async () => {\n++      const ws = await createWebSocket();\n++      ws.send(JSON.stringify({ action:'getClientInfo' }));\n++      const clientInfo = JSON.parse(await ws.receive1());\n++\n++      expect(clientInfo).to.deep.equal({ action:'update', event:'client-info', info:{ id:clientInfo.info.id } });\n++    }).timeout(timeout);\n++\n++    it('should call default handler when no such action exists', async () => {\n++      const ws = await createWebSocket();\n++      const payload = JSON.stringify({ action:`action${Date.now()}` });\n++      ws.send(payload);\n++\n++      expect(await ws.receive1()).to.equal(`Error: No Supported Action in Payload '${payload}'`);\n++    }).timeout(timeout);\n++\n++    it('should call default handler when no action provided', async () => {\n++      const ws = await createWebSocket();\n++      ws.send(JSON.stringify({ hello:'world' }));\n++\n++      expect(await ws.receive1()).to.equal('Error: No Supported Action in Payload \\'{\"hello\":\"world\"}\\'');\n++    }).timeout(timeout);\n++\n++    it('should send & receive data', async () => {\n++      const c1 = await createClient();\n++      const c2 = await createClient();\n++      c1.ws.send(JSON.stringify({ action:'send', data:'Hello World!', clients:[c1.id, c2.id] }));\n++\n++      expect(await c1.ws.receive1()).to.equal('Hello World!');\n++      expect(await c2.ws.receive1()).to.equal('Hello World!');\n++    }).timeout(timeout);\n++\n++    it('should respond when having an internal server error', async () => {\n++      const conn = await createClient();\n++      conn.ws.send(JSON.stringify({ action:'makeError' }));\n++      const res = JSON.parse(await conn.ws.receive1());\n++\n++      expect(res).to.deep.equal({ message:'Internal server error', connectionId:conn.id, requestId:res.requestId });\n++    }).timeout(timeout);\n++\n++    it('should respond via callback', async () => {\n++      const ws = await createWebSocket();\n++      ws.send(JSON.stringify({ action:'replyViaCallback' }));\n++      const res = JSON.parse(await ws.receive1());\n++      expect(res).to.deep.equal({ action:'update', event:'reply-via-callback' });\n++    }).timeout(timeout);\n++\n++    it('should respond with error when calling callback(error)', async () => {\n++      const conn = await createClient();\n++      conn.ws.send(JSON.stringify({ action:'replyErrorViaCallback' }));\n++      const res = JSON.parse(await conn.ws.receive1());\n++      expect(res).to.deep.equal({ message:'Internal server error', connectionId:conn.id, requestId:res.requestId });\n++    }).timeout(timeout);\n++\n++    it('should respond with only the last action when there are more than one in the serverless.yml file', async () => {\n++      const ws = await createWebSocket();\n++      ws.send(JSON.stringify({ action:'makeMultiCalls' }));\n++      const res = JSON.parse(await ws.receive1());\n++\n++      expect(res).to.deep.equal({ action:'update', event:'made-call-2' });\n++    }).timeout(timeout);\n++\n++    it('should not send to non existing client', async () => {\n++      const c1 = await createClient();\n++      c1.ws.send(JSON.stringify({ action:'send', data:'Hello World!', clients:['non-existing-id'] }));\n++\n++      expect(await c1.ws.receive1()).to.equal('Error: Could not Send all Messages');\n++    }).timeout(timeout);\n++\n++    it('should connect & disconnect', async () => {\n++      const ws = await createWebSocket();\n++      await ws.send(JSON.stringify({ action:'registerListener' }));\n++      await ws.receive1();\n++\n++      const c1 = await createClient();\n++      const connect1 = JSON.parse(await ws.receive1()); delete connect1.info.event; delete delete connect1.info.context;\n++      expect(connect1).to.deep.equal({ action:'update', event:'connect', info:{ id:c1.id } });\n++\n++      const c2 = await createClient();\n++      const connect2 = JSON.parse(await ws.receive1()); delete connect2.info.event; delete delete connect2.info.context;\n++      expect(connect2).to.deep.equal({ action:'update', event:'connect', info:{ id:c2.id } });\n++\n++      c2.ws.close();\n++      const disconnect2 = JSON.parse(await ws.receive1()); delete disconnect2.info.event; delete delete disconnect2.info.context;\n++      expect(disconnect2).to.deep.equal({ action:'update', event:'disconnect', info:{ id:c2.id } });\n++\n++      const c3 = await createClient();\n++      const connect3 = JSON.parse(await ws.receive1()); delete connect3.info.event; delete delete connect3.info.context;\n++      expect(connect3).to.deep.equal({ action:'update', event:'connect', info:{ id:c3.id } });\n++\n++      c1.ws.close();\n++      const disconnect1 = JSON.parse(await ws.receive1()); delete disconnect1.info.event; delete delete disconnect1.info.context;\n++      expect(disconnect1).to.deep.equal({ action:'update', event:'disconnect', info:{ id:c1.id } });\n++\n++      c3.ws.close();\n++      const disconnect3 = JSON.parse(await ws.receive1()); delete disconnect3.info.event; delete delete disconnect3.info.context;\n++      expect(disconnect3).to.deep.equal({ action:'update', event:'disconnect', info:{ id:c3.id } });\n++    }).timeout(timeout);\n++\n++    const createExpectedEvent = (connectionId, action, eventType, actualEvent) => {\n++      const url = new URL(endpoint);\n++      const expected = {\n++        apiGatewayUrl: `${actualEvent.apiGatewayUrl}`,\n++        isBase64Encoded: false,\n++        requestContext: {\n++          apiId: actualEvent.requestContext.apiId,\n++          connectedAt: actualEvent.requestContext.connectedAt,\n++          connectionId: `${connectionId}`,\n++          domainName: url.hostname,\n++          eventType,\n++          extendedRequestId: actualEvent.requestContext.extendedRequestId,\n++          identity: {\n++            accessKey: null,\n++            accountId: null,\n++            caller: null,\n++            cognitoAuthenticationProvider: null,\n++            cognitoAuthenticationType: null,\n++            cognitoIdentityId: null,\n++            cognitoIdentityPoolId: null,\n++            principalOrgId: null,\n++            sourceIp: actualEvent.requestContext.identity.sourceIp,\n++            user: null,\n++            userAgent: null,\n++            userArn: null,\n++          },\n++          messageDirection: 'IN',\n++          messageId: actualEvent.requestContext.messageId,\n++          requestId: actualEvent.requestContext.requestId,\n++          requestTime: actualEvent.requestContext.requestTime,\n++          requestTimeEpoch: actualEvent.requestContext.requestTimeEpoch,\n++          routeKey: action,\n++          stage: actualEvent.requestContext.stage,\n++        },\n++      };\n++\n++      return expected;\n++    };\n++\n++    const createExpectedContext = actualContext => {\n++      const expected = {\n++        awsRequestId: actualContext.awsRequestId,\n++        callbackWaitsForEmptyEventLoop: true,\n++        functionName: actualContext.functionName,\n++        functionVersion: '$LATEST',\n++        invokedFunctionArn: actualContext.invokedFunctionArn,\n++        invokeid: actualContext.invokeid,\n++        logGroupName: actualContext.logGroupName,\n++        logStreamName: actualContext.logStreamName,\n++        memoryLimitInMB: actualContext.memoryLimitInMB,\n++      };\n++\n++      return expected;\n++    };\n++\n++    const createExpectedConnectHeaders = actualHeaders => {\n++      const url = new URL(endpoint);\n++      const expected = {\n++        Host: url.hostname,\n++        'Sec-WebSocket-Extensions': actualHeaders['Sec-WebSocket-Extensions'],\n++        'Sec-WebSocket-Key': actualHeaders['Sec-WebSocket-Key'],\n++        'Sec-WebSocket-Version': actualHeaders['Sec-WebSocket-Version'],\n++        'X-Amzn-Trace-Id': actualHeaders['X-Amzn-Trace-Id'],\n++        'X-Forwarded-For': actualHeaders['X-Forwarded-For'],\n++        'X-Forwarded-Port': `${url.port || 443}`,\n++        'X-Forwarded-Proto': `${url.protocol.replace('ws', 'http').replace('wss', 'https').replace(':', '')}`,\n++      };\n++\n++      return expected;\n++    };\n++\n++    const createExpectedDisconnectHeaders = () => {\n++      const url = new URL(endpoint);\n++      const expected = {\n++        Host: url.hostname,\n++        'x-api-key': '',\n++        'x-restapi': '',\n++      };\n++\n++      return expected;\n++    };\n++\n++    const createExpectedConnectMultiValueHeaders = actualHeaders => {\n++      const expected = createExpectedConnectHeaders(actualHeaders);\n++      Object.keys(expected).forEach(key => {\n++        expected[key] = [expected[key]];\n++      });\n++\n++      return expected;\n++    };\n++\n++    const createExpectedDisconnectMultiValueHeaders = actualHeaders => {\n++      const expected = createExpectedDisconnectHeaders(actualHeaders);\n++      Object.keys(expected).forEach(key => {\n++        expected[key] = [expected[key]];\n++      });\n++\n++      return expected;\n++    };\n++\n++    it('should receive correct call info', async () => {\n++      const ws = await createWebSocket();\n++      await ws.send(JSON.stringify({ action:'registerListener' }));\n++      await ws.receive1();\n++\n++      // connect\n++      const c = await createClient();\n++      const connect = JSON.parse(await ws.receive1());\n++      let now = Date.now();\n++      let expectedCallInfo = { id:c.id, event:{ headers:createExpectedConnectHeaders(connect.info.event.headers), multiValueHeaders:createExpectedConnectMultiValueHeaders(connect.info.event.headers), ...createExpectedEvent(c.id, '$connect', 'CONNECT', connect.info.event) }, context:createExpectedContext(connect.info.context) };\n++\n++      expect(connect).to.deep.equal({ action:'update', event:'connect', info:expectedCallInfo });\n++      expect(connect.info.event.requestContext.requestTimeEpoch).to.be.within(connect.info.event.requestContext.connectedAt - 10, connect.info.event.requestContext.requestTimeEpoch + 10);\n++      expect(connect.info.event.requestContext.connectedAt).to.be.within(now - timeout, now);\n++      expect(connect.info.event.requestContext.requestTimeEpoch).to.be.within(now - timeout, now);\n++      expect(moment.utc(connect.info.event.requestContext.requestTime, 'D/MMM/YYYY:H:m:s Z').toDate().getTime()).to.be.within(now - timeout, now);\n++\n++      if (endpoint.startsWith('ws://locahost')) {\n++        expect(connect.info.event.apiGatewayUrl).to.equal(endpoint.replace('ws://', 'http://').replace('wss://', 'https://'));\n++        expect(connect.info.event.headers['X-Forwarded-For']).to.be.equal('127.0.0.1');\n++      }\n++\n++      // getCallInfo\n++      c.ws.send(JSON.stringify({ action:'getCallInfo' }));\n++      const callInfo = JSON.parse(await c.ws.receive1());\n++      now = Date.now();\n++      expectedCallInfo = { event:{ body: '{\"action\":\"getCallInfo\"}', ...createExpectedEvent(c.id, 'getCallInfo', 'MESSAGE', callInfo.info.event) }, context:createExpectedContext(callInfo.info.context) };\n++\n++      expect(callInfo).to.deep.equal({ action:'update', event:'call-info', info:expectedCallInfo });\n++      expect(callInfo.info.event.requestContext.connectedAt).to.be.lt(callInfo.info.event.requestContext.requestTimeEpoch);\n++      expect(callInfo.info.event.requestContext.connectedAt).to.be.within(now - timeout, now);\n++      expect(callInfo.info.event.requestContext.requestTimeEpoch).to.be.within(now - timeout, now);\n++      expect(moment.utc(callInfo.info.event.requestContext.requestTime, 'D/MMM/YYYY:H:m:s Z').toDate().getTime()).to.be.within(now - timeout, now);\n++      if (endpoint.startsWith('ws://locahost')) expect(callInfo.info.event.apiGatewayUrl).to.equal(endpoint.replace('ws://', 'http://').replace('wss://', 'https://'));\n++\n++      // disconnect\n++      c.ws.close();\n++      const disconnect = JSON.parse(await ws.receive1());\n++      now = Date.now();\n++      expectedCallInfo = { id:c.id, event:{ headers:createExpectedDisconnectHeaders(disconnect.info.event.headers), multiValueHeaders:createExpectedDisconnectMultiValueHeaders(disconnect.info.event.headers), ...createExpectedEvent(c.id, '$disconnect', 'DISCONNECT', disconnect.info.event) }, context:createExpectedContext(disconnect.info.context) };\n++\n++      expect(disconnect).to.deep.equal({ action:'update', event:'disconnect', info:expectedCallInfo });\n++    }).timeout(timeout);\n++\n++    it('should be able to parse query string', async () => {\n++      const now = `${Date.now()}`;\n++      const ws = await createWebSocket();\n++      await ws.send(JSON.stringify({ action:'registerListener' }));\n++      await ws.receive1();\n++\n++      await createClient();\n++      await createClient(`now=${now}&before=123456789`);\n++\n++      expect(JSON.parse(await ws.receive1()).info.event.queryStringParameters).to.be.undefined;\n++      expect(JSON.parse(await ws.receive1()).info.event.queryStringParameters).to.deep.equal({ now, before:'123456789' });\n++    }).timeout(timeout);\n++\n++    it('should be able to receive messages via REST API', async () => {\n++      await createClient();\n++      const c2 = await createClient();\n++      const url = new URL(endpoint);\n++      const signature = { service: 'execute-api', host:url.host, path:`${url.pathname}/@connections/${c2.id}`, method: 'POST', body:'Hello World!', headers:{ 'Content-Type':'text/plain'/* 'application/text' */ } };\n++      aws4.sign(signature, { accessKeyId: cred.accessKeyId, secretAccessKey: cred.secretAccessKey });\n++      const res = await req.post(signature.path.replace(url.pathname, '')).set('X-Amz-Date', signature.headers['X-Amz-Date']).set('Authorization', signature.headers.Authorization).set('Content-Type', signature.headers['Content-Type'])\n++.send('Hello World!');\n++\n++      expect(res).to.have.status(200);\n++      expect(await c2.ws.receive1()).to.equal('Hello World!');\n++    }).timeout(timeout);\n++\n++    it('should receive error code when sending to non existing client via REST API', async () => {\n++      const c = 'aJz0Md6VoAMCIbQ=';\n++      const url = new URL(endpoint);\n++      const signature = { service: 'execute-api', host:url.host, path:`${url.pathname}/@connections/${c}`, method: 'POST', body:'Hello World!', headers:{ 'Content-Type':'text/plain'/* 'application/text' */ } };\n++      aws4.sign(signature, { accessKeyId: cred.accessKeyId, secretAccessKey: cred.secretAccessKey });\n++      const res = await req.post(signature.path.replace(url.pathname, '')).set('X-Amz-Date', signature.headers['X-Amz-Date']).set('Authorization', signature.headers.Authorization).set('Content-Type', signature.headers['Content-Type'])\n++.send('Hello World!');\n++\n++      expect(res).to.have.status(410);\n++    }).timeout(timeout);\n++  });\n++});\n+diff --git a/manual_test_websocket/main/test/support/WebSocketTester.js b/manual_test_websocket/main/test/support/WebSocketTester.js\n+new file mode 100644\n+index 0000000..aaeff5a\n+--- /dev/null\n++++ b/manual_test_websocket/main/test/support/WebSocketTester.js\n+@@ -0,0 +1,62 @@\n++/* eslint-disable import/no-extraneous-dependencies */\n++const WebSocket = require('ws');\n++\n++class WebSocketTester {\n++  constructor() {\n++    this.messages = []; this.receivers = [];\n++  }\n++\n++  open(url) {\n++    if (this.ws != null) return;\n++    const ws = this.ws = new WebSocket(url);\n++    ws.on('message', message => {\n++      // console.log('Received: '+message);\n++      if (this.receivers.length > 0) this.receivers.shift()(message);\n++      else this.messages.push(message);\n++    });\n++\n++    return new Promise(resolve => {\n++      ws.on('open', () => {\n++        resolve(true);\n++      });\n++    });\n++  }\n++\n++  send(data) {\n++    this.ws.send(data);\n++  }\n++\n++  receive1() {\n++    return new Promise(resolve => {\n++      if (this.messages.length > 0) resolve(this.messages.shift());\n++      else this.receivers.push(resolve);\n++    });\n++  }\n++\n++  receive(n) {\n++    return new Promise(resolve => {\n++      const messages = [];\n++      for (let i = 0; i < n; i += 1) {\n++        this.receive1().then(message => {\n++          messages[i] = message;\n++          if (i === n - 1) resolve(messages);\n++        });\n++      }\n++    });\n++  }\n++\n++  skip() {\n++    if (this.messages.length > 0) this.messages.shift();\n++    else this.receivers.push(() => {});\n++  }\n++\n++  countUnrecived() {\n++    return this.messages.length;\n++  }\n++\n++  close() {\n++    if (this.ws != null) this.ws.close();\n++  }\n++}\n++\n++module.exports = WebSocketTester;\n+diff --git a/manual_test_websocket/manual_test_websocket_RouteSelection/handler.js b/manual_test_websocket/manual_test_websocket_RouteSelection/handler.js\n+deleted file mode 100644\n+index e8da78f..0000000\n+--- a/manual_test_websocket/manual_test_websocket_RouteSelection/handler.js\n++++ /dev/null\n+@@ -1,37 +0,0 @@\n+-'use strict';\n+-\n+-const AWS = require('aws-sdk');\n+-\n+-\n+-const successfullResponse = {\n+-  statusCode: 200,\n+-  body: 'Request is OK.'\n+-};\n+-\n+-const errorResponse = {\n+-  statusCode: 400,\n+-  body: 'Request is not OK.'\n+-};\n+-\n+-module.exports.echo = async (event, context) => {\n+-  const action = JSON.parse(event.body);\n+-  \n+-  await sendToClient(action.message, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context));\n+-  return successfullResponse; \n+-};\n+-\n+-const newAWSApiGatewayManagementApi=(event, context)=>{\n+-  let endpoint=event.apiGatewayUrl;\n+-\n+-  if (!endpoint) endpoint = event.requestContext.domainName+'/'+event.requestContext.stage;\n+-  const apiVersion='2018-11-29';\n+-  return new AWS.ApiGatewayManagementApi({ apiVersion, endpoint });\n+-};\n+-\n+-const sendToClient = (data, connectionId, apigwManagementApi) => {\n+-  // console.log(`sendToClient:${connectionId}`);\n+-  let sendee=data;\n+-  if ('object'==typeof data) sendee=JSON.stringify(data);\n+-\n+-  return apigwManagementApi.postToConnection({ConnectionId: connectionId, Data: sendee}).promise();\n+-};\n+diff --git a/manual_test_websocket/manual_test_websocket_RouteSelection/test/e2e/ws.e2e.js b/manual_test_websocket/manual_test_websocket_RouteSelection/test/e2e/ws.e2e.js\n+deleted file mode 100644\n+index a565936..0000000\n+--- a/manual_test_websocket/manual_test_websocket_RouteSelection/test/e2e/ws.e2e.js\n++++ /dev/null\n+@@ -1,53 +0,0 @@\n+-const chai = require('chai');\n+-const expect = chai.expect;\n+-const endpoint = process.env.npm_config_endpoint||'ws://localhost:3005';\n+-const timeout = process.env.npm_config_timeout?parseInt(process.env.npm_config_timeout):1000;\n+-const WebSocketTester=require('../support/WebSocketTester');\n+-\n+-describe('serverless', ()=>{\n+-  describe('with WebSocket support', ()=>{\n+-    let clients=[]; let req=null; let cred=null;\n+-    const createWebSocket=async (qs)=>{\n+-      const ws=new WebSocketTester();\n+-      let url=endpoint;\n+-      if (qs) url=`${endpoint}?${qs}`;\n+-      await ws.open(url);\n+-      clients.push(ws);\n+-      return ws;\n+-    };\n+-    const createClient=async (qs)=>{\n+-      const ws=await createWebSocket(qs);\n+-      ws.send(JSON.stringify({action:'getClientInfo'}));\n+-      const json=await ws.receive1();\n+-      const id=JSON.parse(json).info.id;\n+-      return {ws, id};\n+-    };\n+-    \n+-    beforeEach(()=>{\n+-      clients=[];\n+-    });\n+-    afterEach(async ()=>{\n+-      await Promise.all(clients.map(async (ws, i)=>{\n+-        const n=ws.countUnrecived();\n+-\n+-        if (n>0) {\n+-          console.log(`unreceived:[i=${i}]`);\n+-          (await ws.receive(n)).forEach(m=>console.log(m));\n+-        }\n+-        expect(n).to.equal(0);\n+-        ws.close();\n+-      }));\n+-      clients=[];\n+-    });\n+-\n+-    it(`should call action 'echo' handler located at service.do`, async ()=>{\n+-      const ws=await createWebSocket();\n+-      const now=\"\"+Date.now();\n+-      const payload=JSON.stringify({service:{do:'echo'}, message:now});\n+-      ws.send(payload);\n+-      expect(await ws.receive1()).to.equal(`${now}`);\n+-    }).timeout(timeout);\n+-\n+-    \n+-  });\n+-});\n+\\ No newline at end of file\n+diff --git a/manual_test_websocket/manual_test_websocket_RouteSelection/test/support/WebSocketTester.js b/manual_test_websocket/manual_test_websocket_RouteSelection/test/support/WebSocketTester.js\n+deleted file mode 100644\n+index d5e8005..0000000\n+--- a/manual_test_websocket/manual_test_websocket_RouteSelection/test/support/WebSocketTester.js\n++++ /dev/null\n+@@ -1,62 +0,0 @@\n+-'use strict';\n+-\n+-const WebSocket = require('ws');\n+-\n+-class WebSocketTester {\n+-  constructor() {\n+-    this.messages=[]; this.receivers=[];\n+-  }\n+-\n+-  open(url) {\n+-    if (null!=this.ws) return;\n+-    const ws=this.ws=new WebSocket(url);\n+-    ws.on('message', (message)=>{\n+-      // console.log('Received: '+message);\n+-      if (0<this.receivers.length) this.receivers.shift()(message);\n+-      else this.messages.push(message);\n+-    });\n+-    return new Promise((resolve/*, reject*/)=> {\n+-      ws.on('open', ()=>{\n+-        resolve(true);\n+-      });\n+-    });\n+-  }\n+-\n+-  send(data) {\n+-    this.ws.send(data);\n+-  }\n+-\n+-  receive1() {\n+-    return new Promise((resolve/*, reject*/)=>{\n+-      if (0<this.messages.length) resolve(this.messages.shift());\n+-      else this.receivers.push(resolve);\n+-    });\n+-  }\n+-\n+-  receive(n) {\n+-    return new Promise((resolve/*, reject*/)=>{\n+-      const messages=[];\n+-      for (let i=0; i<n; i+=1) {\n+-        this.receive1().then((message)=>{\n+-          messages[i]=message;\n+-          if (i===n-1) resolve(messages);\n+-        });\n+-      }\n+-    });\n+-  }\n+-\n+-  skip() {\n+-    if (0<this.messages.length) this.messages.shift();\n+-    else this.receivers.push(()=>{});\n+-  }\n+-\n+-  countUnrecived() {\n+-    return this.messages.length;\n+-  }\n+-\n+-  close() {\n+-    if (null!=this.ws) this.ws.close();\n+-  }\n+-};\n+-\n+-module.exports=WebSocketTester;\n+diff --git a/manual_test_websocket/manual_test_websocket_main/handler.js b/manual_test_websocket/manual_test_websocket_main/handler.js\n+deleted file mode 100644\n+index 7ada0f0..0000000\n+--- a/manual_test_websocket/manual_test_websocket_main/handler.js\n++++ /dev/null\n+@@ -1,150 +0,0 @@\n+-'use strict';\n+-\n+-const AWS = require('aws-sdk');\n+-const ddb = (()=>{\n+-  if (process.env.IS_OFFLINE) return new AWS.DynamoDB.DocumentClient({region: \"localhost\", endpoint: \"http://localhost:8000\"});\n+-  return new AWS.DynamoDB.DocumentClient();\n+-})();\n+-\n+-\n+-const successfullResponse = {\n+-  statusCode: 200,\n+-  body: 'Request is OK.'\n+-};\n+-\n+-const errorResponse = {\n+-  statusCode: 400,\n+-  body: 'Request is not OK.'\n+-};\n+-\n+-// const generatePolicy = function(principalId, effect, resource) {\n+-//   const authResponse = {};\n+-//   authResponse.principalId = principalId;\n+-//   if (effect && resource) {\n+-//       const policyDocument = {};\n+-//       policyDocument.Version = '2012-10-17';\n+-//       policyDocument.Statement = [];\n+-//       const statementOne = {};\n+-//       statementOne.Action = 'execute-api:Invoke';\n+-//       statementOne.Effect = effect;\n+-//       statementOne.Resource = resource;\n+-//       policyDocument.Statement[0] = statementOne;\n+-//       authResponse.policyDocument = policyDocument;\n+-//   }\n+-//   return authResponse;\n+-// };\n+-\n+-// module.exports.http = async (event, context) => {\n+-//   return successfullResponse; \n+-// };\n+-\n+-module.exports.connect = async (event, context) => {\n+-  // console.log('connect:');\n+-  const listener=await ddb.get({TableName:'listeners', Key:{name:'default'}}).promise();\n+-\n+-  if (listener.Item) {\n+-    const timeout=new Promise((resolve) => setTimeout(resolve,100));\n+-    const send=sendToClient( // sendToClient won't return on AWS when client doesn't exits so we set a timeout\n+-      JSON.stringify({action:'update', event:'connect', info:{id:event.requestContext.connectionId, event:{...event,  apiGatewayUrl:`${event.apiGatewayUrl}`}, context}}), \n+-      listener.Item.id, \n+-      newAWSApiGatewayManagementApi(event, context)).catch(()=>{});\n+-    await Promise.race([send, timeout]);\n+-  }\n+-  return successfullResponse; \n+-};\n+-\n+-// module.export.auth = (event, context, callback) => {\n+-//   //console.log('auth:');\n+-//   const token = event.headers[\"Authorization\"];\n+-  \n+-//   if ('deny'===token) callback(null, generatePolicy('user', 'Deny', event.methodArn));\n+-//   else callback(null, generatePolicy('user', 'Allow', event.methodArn));;\n+-// };\n+-\n+-module.exports.disconnect = async (event, context) => {\n+-  const listener=await ddb.get({TableName:'listeners', Key:{name:'default'}}).promise();\n+-  if (listener.Item) await sendToClient(JSON.stringify({action:'update', event:'disconnect', info:{id:event.requestContext.connectionId, event:{...event,  apiGatewayUrl:`${event.apiGatewayUrl}`}, context}}), listener.Item.id, newAWSApiGatewayManagementApi(event, context)).catch(()=>{});\n+-  return successfullResponse; \n+-};\n+-\n+-module.exports.defaultHandler = async (event, context) => {\n+-  await sendToClient(`Error: No Supported Action in Payload '${event.body}'`, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err=>console.log(err));\n+-  return successfullResponse; \n+-};\n+-\n+-module.exports.getClientInfo = async (event, context) => {\n+-  // console.log('getClientInfo:');\n+-  await sendToClient({action:'update', event:'client-info', info:{id:event.requestContext.connectionId}}, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err=>console.log(err));\n+-  return successfullResponse; \n+-};\n+-\n+-module.exports.getCallInfo = async (event, context) => {\n+-  await sendToClient({action:'update', event:'call-info', info:{event:{...event,  apiGatewayUrl:`${event.apiGatewayUrl}`}, context}}, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err=>console.log(err));\n+-  return successfullResponse; \n+-};\n+-\n+-module.exports.makeError = async (event, context) => {\n+-  const obj=null;\n+-  obj.non.non=1;\n+-  return successfullResponse; \n+-};\n+-\n+-module.exports.replyViaCallback = (event, context, callback) => {\n+-  sendToClient({action:'update', event:'reply-via-callback'}, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err=>console.log(err));\n+-  callback();\n+-};\n+-\n+-module.exports.replyErrorViaCallback = (event, context, callback) => {\n+-  return callback(\"error error error\");\n+-};\n+-\n+-module.exports.multiCall1 = async (event, context) => {\n+-  await sendToClient({action:'update', event:'made-call-1'}, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err=>console.log(err));\n+-  return successfullResponse; \n+-};\n+-\n+-module.exports.multiCall2 = async (event, context) => {\n+-  await sendToClient({action:'update', event:'made-call-2'}, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err=>console.log(err));\n+-  return successfullResponse; \n+-};\n+-\n+-\n+-module.exports.send = async (event, context) => {\n+-  const action = JSON.parse(event.body);\n+-  const sents=[];\n+-  action.clients.forEach((connectionId)=>{ \n+-    const sent=sendToClient(action.data, connectionId, newAWSApiGatewayManagementApi(event, context));\n+-    sents.push(sent);\n+-  });\n+-  const noErr=await Promise.all(sents).then(()=>true).catch(()=>false);\n+-  if (!noErr) await sendToClient('Error: Could not Send all Messages', event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context));\n+-  return successfullResponse; \n+-};\n+-\n+-module.exports.registerListener = async (event, context) => {\n+-  await ddb.put({TableName:'listeners', Item:{name:'default', id:event.requestContext.connectionId}}).promise();\n+-  await sendToClient({action:'update', event:'register-listener', info:{id:event.requestContext.connectionId}}, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err=>console.log(err));\n+-  return successfullResponse; \n+-};\n+-\n+-module.exports.deleteListener = async (event, context) => {\n+-  await ddb.delete({TableName:'listeners', Key:{name:'default'}}).promise();\n+-\n+-  return successfullResponse;  \n+-};\n+-\n+-const newAWSApiGatewayManagementApi=(event, context)=>{\n+-  let endpoint=event.apiGatewayUrl;\n+-\n+-  if (!endpoint) endpoint = event.requestContext.domainName+'/'+event.requestContext.stage;\n+-  const apiVersion='2018-11-29';\n+-  return new AWS.ApiGatewayManagementApi({ apiVersion, endpoint });\n+-};\n+-\n+-const sendToClient = (data, connectionId, apigwManagementApi) => {\n+-  // console.log(`sendToClient:${connectionId}`);\n+-  let sendee=data;\n+-  if ('object'==typeof data) sendee=JSON.stringify(data);\n+-\n+-  return apigwManagementApi.postToConnection({ConnectionId: connectionId, Data: sendee}).promise();\n+-};\n+diff --git a/manual_test_websocket/manual_test_websocket_main/test/e2e/ws.e2e.js b/manual_test_websocket/manual_test_websocket_main/test/e2e/ws.e2e.js\n+deleted file mode 100644\n+index d8db0b7..0000000\n+--- a/manual_test_websocket/manual_test_websocket_main/test/e2e/ws.e2e.js\n++++ /dev/null\n+@@ -1,342 +0,0 @@\n+-const chai = require('chai');\n+-const chaiHttp = require('chai-http');\n+-chai.use(chaiHttp);\n+-const expect = chai.expect;\n+-const aws4  = require('aws4');\n+-const awscred = require('awscred');\n+-const moment = require('moment');\n+-const endpoint = process.env.npm_config_endpoint||'ws://localhost:3001';\n+-const timeout = process.env.npm_config_timeout?parseInt(process.env.npm_config_timeout):1000;\n+-const WebSocketTester=require('../support/WebSocketTester');\n+-\n+-describe('serverless', ()=>{\n+-  describe('with WebSocket support', ()=>{\n+-    let clients=[]; let req=null; let cred=null;\n+-    const createWebSocket=async (qs)=>{\n+-      const ws=new WebSocketTester();\n+-      let url=endpoint;\n+-      if (qs) url=`${endpoint}?${qs}`;\n+-      await ws.open(url);\n+-      clients.push(ws);\n+-      return ws;\n+-    };\n+-    const createClient=async (qs)=>{\n+-      const ws=await createWebSocket(qs);\n+-      ws.send(JSON.stringify({action:'getClientInfo'}));\n+-      const json=await ws.receive1();\n+-      const id=JSON.parse(json).info.id;\n+-      return {ws, id};\n+-    };\n+-    before(async ()=>{\n+-      req=chai.request(`${endpoint.replace('ws://', 'http://').replace('wss://', 'https://')}`).keepOpen();\n+-      // req=chai.request('http://localhost:3001/dev').keepOpen();\n+-      cred=await new Promise((resolve, reject)=>{\n+-        awscred.loadCredentials(function(err, data) { if (err) reject(err); else resolve(data); });\n+-      });\n+-    });\n+-    \n+-    beforeEach(()=>{\n+-      clients=[];\n+-    });\n+-    afterEach(async ()=>{\n+-      await Promise.all(clients.map(async (ws, i)=>{\n+-        const n=ws.countUnrecived();\n+-\n+-        if (n>0) {\n+-          console.log(`unreceived:[i=${i}]`);\n+-          (await ws.receive(n)).forEach(m=>console.log(m));\n+-        }\n+-        expect(n).to.equal(0);\n+-        ws.close();\n+-      }));\n+-      clients=[];\n+-    });\n+-\n+-    it('should request to upgade to WebSocket when receving an HTTP request',  async ()=>{\n+-      const req=chai.request(`${endpoint.replace('ws://', 'http://').replace('wss://', 'https://')}`).keepOpen();\n+-      let res=await req.get(`/${Date.now()}`);//.set('Authorization', user.accessToken);\n+-      expect(res).to.have.status(426);\n+-      res=await req.get(`/${Date.now()}/${Date.now()}`);//.set('Authorization', user.accessToken);\n+-      expect(res).to.have.status(426);\n+-    }).timeout(timeout);\n+-\n+-    it('should open a WebSocket', async ()=>{\n+-      const ws=await createWebSocket();\n+-      expect(ws).not.to.be.undefined;\n+-    }).timeout(timeout);\n+-\n+-    it('should receive client connection info', async ()=>{\n+-      const ws=await createWebSocket();\n+-      ws.send(JSON.stringify({action:'getClientInfo'}));\n+-      const clientInfo=JSON.parse(await ws.receive1());\n+-      expect(clientInfo).to.deep.equal({action:'update', event:'client-info', info:{id:clientInfo.info.id}});\n+-    }).timeout(timeout);\n+-\n+-    it('should call default handler when no such action exists', async ()=>{\n+-      const ws=await createWebSocket();\n+-      const payload=JSON.stringify({action:'action'+Date.now()});\n+-      ws.send(payload);\n+-      expect(await ws.receive1()).to.equal(`Error: No Supported Action in Payload '${payload}'`);\n+-    }).timeout(timeout);\n+-\n+-    it('should call default handler when no action provided', async ()=>{\n+-      const ws=await createWebSocket();\n+-      ws.send(JSON.stringify({hello:'world'}));\n+-      expect(await ws.receive1()).to.equal(`Error: No Supported Action in Payload '{\"hello\":\"world\"}'`);\n+-    }).timeout(timeout);\n+-\n+-    it('should send & receive data', async ()=>{\n+-      const c1=await createClient();\n+-      const c2=await createClient();\n+-      const c3=await createClient();\n+-      c1.ws.send(JSON.stringify({action:'send', data:'Hello World!', clients:[c1.id, c3.id]}));\n+-      expect(await c1.ws.receive1()).to.equal('Hello World!');\n+-      expect(await c3.ws.receive1()).to.equal('Hello World!');\n+-    }).timeout(timeout);\n+-\n+-    it('should respond when having an internal server error', async ()=>{\n+-      const conn=await createClient();\n+-      conn.ws.send(JSON.stringify({action:'makeError'}));\n+-      const res=JSON.parse(await conn.ws.receive1());\n+-      expect(res).to.deep.equal({message:'Internal server error', connectionId:conn.id, requestId:res.requestId});\n+-    }).timeout(timeout);\n+-\n+-    it('should respond via callback', async ()=>{\n+-      const ws=await createWebSocket();\n+-      ws.send(JSON.stringify({action:'replyViaCallback'}));\n+-      const res=JSON.parse(await ws.receive1());\n+-      expect(res).to.deep.equal({action:'update', event:'reply-via-callback'});\n+-    }).timeout(timeout);\n+-\n+-    it('should respond with error when calling callback(error)', async ()=>{\n+-      const conn=await createClient();\n+-      conn.ws.send(JSON.stringify({action:'replyErrorViaCallback'}));\n+-      const res=JSON.parse(await conn.ws.receive1());\n+-      expect(res).to.deep.equal({message:'Internal server error', connectionId:conn.id, requestId:res.requestId});\n+-    }).timeout(timeout);\n+-\n+-    it('should respond with only the last action when there are more than one in the serverless.yml file', async ()=>{\n+-      const ws=await createWebSocket();\n+-      ws.send(JSON.stringify({action:'makeMultiCalls'}));\n+-      const res=JSON.parse(await ws.receive1());\n+-      expect(res).to.deep.equal({action:'update', event:'made-call-2'});\n+-    }).timeout(timeout);\n+-\n+-    it('should not send to non existing client', async ()=>{\n+-      const c1=await createClient();\n+-      c1.ws.send(JSON.stringify({action:'send', data:'Hello World!', clients:[\"non-existing-id\"]}));\n+-      expect(await c1.ws.receive1()).to.equal('Error: Could not Send all Messages');\n+-    }).timeout(timeout);\n+-\n+-    it('should connect & disconnect', async ()=>{\n+-      const ws=await createWebSocket();\n+-      await ws.send(JSON.stringify({action:'registerListener'}));\n+-      await ws.receive1();\n+-\n+-      const c1=await createClient();\n+-      const connect1 = JSON.parse(await ws.receive1()); delete connect1.info.event; delete delete connect1.info.context;\n+-      expect(connect1).to.deep.equal({action:'update', event:'connect', info:{id:c1.id}});\n+-\n+-      const c2=await createClient();\n+-      const connect2 = JSON.parse(await ws.receive1()); delete connect2.info.event; delete delete connect2.info.context;\n+-      expect(connect2).to.deep.equal({action:'update', event:'connect', info:{id:c2.id}});\n+-\n+-      c2.ws.close();\n+-      const disconnect2 = JSON.parse(await ws.receive1()); delete disconnect2.info.event; delete delete disconnect2.info.context;\n+-      expect(disconnect2).to.deep.equal({action:'update', event:'disconnect', info:{id:c2.id}});\n+-\n+-      const c3=await createClient();\n+-      const connect3 = JSON.parse(await ws.receive1()); delete connect3.info.event; delete delete connect3.info.context;\n+-      expect(connect3).to.deep.equal({action:'update', event:'connect', info:{id:c3.id}});\n+-\n+-      c1.ws.close();\n+-      const disconnect1 = JSON.parse(await ws.receive1()); delete disconnect1.info.event; delete delete disconnect1.info.context;\n+-      expect(disconnect1).to.deep.equal({action:'update', event:'disconnect', info:{id:c1.id}});\n+-\n+-      c3.ws.close();\n+-      const disconnect3 = JSON.parse(await ws.receive1()); delete disconnect3.info.event; delete delete disconnect3.info.context;\n+-      expect(disconnect3).to.deep.equal({action:'update', event:'disconnect', info:{id:c3.id}});\n+-    }).timeout(timeout);\n+-\n+-    const createExpectedEvent=(connectionId, action, eventType, actualEvent)=>{\n+-      const url=new URL(endpoint);\n+-      const expected={\n+-        apiGatewayUrl: `${actualEvent.apiGatewayUrl}`,\n+-        isBase64Encoded: false,\n+-        requestContext: {\n+-          apiId: actualEvent.requestContext.apiId,\n+-          connectedAt: actualEvent.requestContext.connectedAt,\n+-          connectionId: `${connectionId}`,\n+-          domainName: url.hostname,\n+-          eventType,\n+-          extendedRequestId: actualEvent.requestContext.extendedRequestId,\n+-          identity: {\n+-            accessKey: null,\n+-            accountId: null,\n+-            caller: null,\n+-            cognitoAuthenticationProvider: null,\n+-            cognitoAuthenticationType: null,\n+-            cognitoIdentityId: null,\n+-            cognitoIdentityPoolId: null,\n+-            principalOrgId: null,\n+-            sourceIp: actualEvent.requestContext.identity.sourceIp,\n+-            user: null,\n+-            userAgent: null,\n+-            userArn: null,\n+-          },\n+-          messageDirection: 'IN',\n+-          messageId: actualEvent.requestContext.messageId,\n+-          requestId: actualEvent.requestContext.requestId,\n+-          requestTime: actualEvent.requestContext.requestTime,\n+-          requestTimeEpoch: actualEvent.requestContext.requestTimeEpoch,\n+-          routeKey: action,\n+-          stage: actualEvent.requestContext.stage,\n+-        },\n+-      };\n+-\n+-      return expected;\n+-    };\n+-\n+-    const createExpectedContext=(actualContext)=>{\n+-      const expected={\n+-          awsRequestId: actualContext.awsRequestId,\n+-          callbackWaitsForEmptyEventLoop: true,\n+-          functionName: actualContext.functionName,\n+-          functionVersion: '$LATEST',\n+-          invokedFunctionArn: actualContext.invokedFunctionArn,\n+-          invokeid: actualContext.invokeid,\n+-          logGroupName: actualContext.logGroupName,\n+-          logStreamName: actualContext.logStreamName,\n+-          memoryLimitInMB: actualContext.memoryLimitInMB,\n+-        };\n+-\n+-        return expected;\n+-    };\n+-\n+-    const createExpectedConnectHeaders=(actualHeaders)=>{\n+-      const url=new URL(endpoint); \n+-      const expected={\n+-        Host: url.hostname,\n+-        'Sec-WebSocket-Extensions': actualHeaders['Sec-WebSocket-Extensions'],\n+-        'Sec-WebSocket-Key': actualHeaders['Sec-WebSocket-Key'],\n+-        'Sec-WebSocket-Version': actualHeaders['Sec-WebSocket-Version'],\n+-        'X-Amzn-Trace-Id': actualHeaders['X-Amzn-Trace-Id'],\n+-        'X-Forwarded-For': actualHeaders['X-Forwarded-For'],\n+-        'X-Forwarded-Port': `${url.port||443}`,\n+-        'X-Forwarded-Proto': `${url.protocol.replace('ws', 'http').replace('wss',  'https').replace(':', '')}`\n+-      };\n+-\n+-      return expected;\n+-    };\n+-\n+-    const createExpectedDisconnectHeaders=(actualHeaders)=>{\n+-      const url=new URL(endpoint); \n+-      const expected={\n+-        Host: url.hostname,\n+-        'x-api-key': '',\n+-        'x-restapi': '',\n+-      };\n+-\n+-      return expected;\n+-    };\n+-\n+-    const createExpectedConnectMultiValueHeaders=(actualHeaders)=>{\n+-      const expected=createExpectedConnectHeaders(actualHeaders);\n+-      Object.keys(expected).map((key, index)=>{\n+-        expected[key] = [expected[key]];\n+-      });\n+-      return expected;\n+-    };\n+-\n+-    const createExpectedDisconnectMultiValueHeaders=(actualHeaders)=>{\n+-      const expected=createExpectedDisconnectHeaders(actualHeaders);\n+-      Object.keys(expected).map((key, index)=>{\n+-        expected[key] = [expected[key]];\n+-      });\n+-      return expected;\n+-    };\n+-\n+-    it('should receive correct call info', async ()=>{\n+-      const ws=await createWebSocket();\n+-      await ws.send(JSON.stringify({action:'registerListener'}));\n+-      await ws.receive1();\n+-\n+-      // connect\n+-      const c=await createClient();\n+-      const connect=JSON.parse(await ws.receive1());\n+-      let now=Date.now(); \n+-      let expectedCallInfo={id:c.id, event:{headers:createExpectedConnectHeaders(connect.info.event.headers), multiValueHeaders:createExpectedConnectMultiValueHeaders(connect.info.event.headers), ...createExpectedEvent(c.id, '$connect',  'CONNECT', connect.info.event)}, context:createExpectedContext(connect.info.context)};\n+-      expect(connect).to.deep.equal({action:'update', event:'connect', info:expectedCallInfo});\n+-      expect(connect.info.event.requestContext.requestTimeEpoch).to.be.within(connect.info.event.requestContext.connectedAt-10, connect.info.event.requestContext.requestTimeEpoch+10);\n+-      expect(connect.info.event.requestContext.connectedAt).to.be.within(now-timeout, now);\n+-      expect(connect.info.event.requestContext.requestTimeEpoch).to.be.within(now-timeout, now);\n+-      expect(moment.utc(connect.info.event.requestContext.requestTime, 'D/MMM/YYYY:H:m:s Z').toDate().getTime()).to.be.within(now-timeout, now);\n+-      if (endpoint.startsWith('ws://locahost')) {\n+-        expect(connect.info.event.apiGatewayUrl).to.equal(endpoint.replace('ws://', 'http://').replace('wss://', 'https://'));\n+-        expect(connect.info.event.headers['X-Forwarded-For']).to.be.equal('127.0.0.1');\n+-      }\n+-\n+-      // getCallInfo\n+-      c.ws.send(JSON.stringify({action:'getCallInfo'}));\n+-      const callInfo=JSON.parse(await c.ws.receive1());\n+-      now=Date.now(); \n+-      expectedCallInfo={event:{body: '{\\\"action\\\":\\\"getCallInfo\\\"}', ...createExpectedEvent(c.id, 'getCallInfo',  'MESSAGE', callInfo.info.event)}, context:createExpectedContext(callInfo.info.context)};\n+-      expect(callInfo).to.deep.equal({action:'update', event:'call-info', info:expectedCallInfo});\n+-      expect(callInfo.info.event.requestContext.connectedAt).to.be.lt(callInfo.info.event.requestContext.requestTimeEpoch);\n+-      expect(callInfo.info.event.requestContext.connectedAt).to.be.within(now-timeout, now);\n+-      expect(callInfo.info.event.requestContext.requestTimeEpoch).to.be.within(now-timeout, now);\n+-      expect(moment.utc(callInfo.info.event.requestContext.requestTime, 'D/MMM/YYYY:H:m:s Z').toDate().getTime()).to.be.within(now-timeout, now);\n+-      if (endpoint.startsWith('ws://locahost')) expect(callInfo.info.event.apiGatewayUrl).to.equal(endpoint.replace('ws://', 'http://').replace('wss://', 'https://'));\n+-\n+-      // disconnect\n+-      c.ws.close();\n+-      const disconnect=JSON.parse(await ws.receive1());\n+-      now=Date.now(); \n+-      expectedCallInfo={id:c.id, event:{headers:createExpectedDisconnectHeaders(disconnect.info.event.headers), multiValueHeaders:createExpectedDisconnectMultiValueHeaders(disconnect.info.event.headers), ...createExpectedEvent(c.id, '$disconnect',  'DISCONNECT', disconnect.info.event)}, context:createExpectedContext(disconnect.info.context)};\n+-      expect(disconnect).to.deep.equal({action:'update', event:'disconnect', info:expectedCallInfo});\n+-    }).timeout(timeout);\n+-\n+-    it('should be able to parse query string', async ()=>{\n+-      const now=''+Date.now();\n+-      const ws=await createWebSocket();\n+-      await ws.send(JSON.stringify({action:'registerListener'}));\n+-      await ws.receive1();\n+-\n+-      const c1=await createClient();\n+-      const c2=await createClient(`now=${now}&before=123456789`);\n+-      expect(JSON.parse(await ws.receive1()).info.event.queryStringParameters).to.be.undefined;\n+-      expect(JSON.parse(await ws.receive1()).info.event.queryStringParameters).to.deep.equal({now, before:'123456789'});\n+-    }).timeout(timeout);\n+-\n+-    it('should be able to receive messages via REST API', async ()=>{\n+-      const c1=await createClient();\n+-      const c2=await createClient();\n+-      const url=new URL(endpoint);\n+-      const signature = {service: 'execute-api', host:url.host, path:`${url.pathname}/@connections/${c2.id}`, method: 'POST', body:'Hello World!', headers:{'Content-Type':'text/plain'/*'application/text'*/}};\n+-      aws4.sign(signature, {accessKeyId: cred.accessKeyId, secretAccessKey: cred.secretAccessKey});\n+-      const res=await req.post(signature.path.replace(url.pathname, '')).set('X-Amz-Date', signature.headers['X-Amz-Date']).set('Authorization', signature.headers['Authorization']).set('Content-Type', signature.headers['Content-Type']).send('Hello World!');\n+-      expect(res).to.have.status(200);\n+-      expect(await c2.ws.receive1()).to.equal('Hello World!');\n+-    }).timeout(timeout);\n+-\n+-    it('should receive error code when sending to non existing client via REST API', async ()=>{\n+-      const c='aJz0Md6VoAMCIbQ=';\n+-      const url=new URL(endpoint);\n+-      const signature = {service: 'execute-api', host:url.host, path:`${url.pathname}/@connections/${c}`, method: 'POST', body:'Hello World!', headers:{'Content-Type':'text/plain'/*'application/text'*/}};\n+-      aws4.sign(signature, {accessKeyId: cred.accessKeyId, secretAccessKey: cred.secretAccessKey});\n+-      const res=await req.post(signature.path.replace(url.pathname, '')).set('X-Amz-Date', signature.headers['X-Amz-Date']).set('Authorization', signature.headers['Authorization']).set('Content-Type', signature.headers['Content-Type']).send('Hello World!');\n+-      expect(res).to.have.status(410);\n+-    }).timeout(timeout);\n+-\n+-    // UNABLE TO TEST HIS SCENARIO BECAUSE AWS DOESN'T RETURN ANYTHING\n+-    // it('should not receive anything when POSTing nothing', async ()=>{\n+-    //   const c1=await createClient();\n+-    //   const url=new URL(endpoint);\n+-    //   const signature = {service: 'execute-api', host:url.host, path:`${url.pathname}/@connections/${c1.id}`, method: 'POST'/*, body:'Hello World!'*/, headers:{'Content-Type':'text/plain'/*'application/text'*/}};\n+-    //   aws4.sign(signature, {accessKeyId: cred.accessKeyId, secretAccessKey: cred.secretAccessKey});\n+-    //   const res=await req.post(signature.path.replace(url.pathname, '')).set('X-Amz-Date', signature.headers['X-Amz-Date']).set('Authorization', signature.headers['Authorization']).set('Content-Type', signature.headers['Content-Type']).send(/*'Hello World!'*/);\n+-    //   expect(res).to.have.status(200);\n+-    // }).timeout(timeout);\n+-    \n+-  });\n+-});\n+\\ No newline at end of file\n+diff --git a/manual_test_websocket/manual_test_websocket_main/test/support/WebSocketTester.js b/manual_test_websocket/manual_test_websocket_main/test/support/WebSocketTester.js\n+deleted file mode 100644\n+index ee5c8d6..0000000\n+--- a/manual_test_websocket/manual_test_websocket_main/test/support/WebSocketTester.js\n++++ /dev/null\n+@@ -1,60 +0,0 @@\n+-const WebSocket = require('ws');\n+-\n+-class WebSocketTester {\n+-  constructor() {\n+-    this.messages=[]; this.receivers=[];\n+-  }\n+-\n+-  open(url) {\n+-    if (null!=this.ws) return;\n+-    const ws=this.ws=new WebSocket(url);\n+-    ws.on('message', (message)=>{\n+-      // console.log('Received: '+message);\n+-      if (0<this.receivers.length) this.receivers.shift()(message);\n+-      else this.messages.push(message);\n+-    });\n+-    return new Promise((resolve/*, reject*/)=> {\n+-      ws.on('open', ()=>{\n+-        resolve(true);\n+-      });\n+-    });\n+-  }\n+-\n+-  send(data) {\n+-    this.ws.send(data);\n+-  }\n+-\n+-  receive1() {\n+-    return new Promise((resolve/*, reject*/)=>{\n+-      if (0<this.messages.length) resolve(this.messages.shift());\n+-      else this.receivers.push(resolve);\n+-    });\n+-  }\n+-\n+-  receive(n) {\n+-    return new Promise((resolve/*, reject*/)=>{\n+-      const messages=[];\n+-      for (let i=0; i<n; i+=1) {\n+-        this.receive1().then((message)=>{\n+-          messages[i]=message;\n+-          if (i===n-1) resolve(messages);\n+-        });\n+-      }\n+-    });\n+-  }\n+-\n+-  skip() {\n+-    if (0<this.messages.length) this.messages.shift();\n+-    else this.receivers.push(()=>{});\n+-  }\n+-\n+-  countUnrecived() {\n+-    return this.messages.length;\n+-  }\n+-\n+-  close() {\n+-    if (null!=this.ws) this.ws.close();\n+-  }\n+-};\n+-\n+-module.exports=WebSocketTester;\n+\\ No newline at end of file\n+-- \n+2.21.1 (Apple Git-122.3)"
  },
  {
    "sha": "1d17efc141ca8302d71c61abc5687b35decc5aa2",
    "filename": "run/example-patches/hlint-yaml.patch",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/restyled-io/actions/blob/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fexample-patches%2Fhlint-yaml.patch",
    "raw_url": "https://github.com/restyled-io/actions/raw/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fexample-patches%2Fhlint-yaml.patch",
    "contents_url": "https://api.github.com/repos/restyled-io/actions/contents/run%2Fexample-patches%2Fhlint-yaml.patch?ref=8672a7df4bc9edfea1ae062620328165196c11cf",
    "patch": "@@ -0,0 +1,26 @@\n+From 89afcd42fb6f2602fbcd03d6e5573b1859347787 Mon Sep 17 00:00:00 2001\n+From: \"Restyled.io\" <commits@restyled.io>\n+Date: Fri, 17 Jan 2025 18:09:56 +0000\n+Subject: [PATCH 2/2] Restyled by prettier-yaml\n+\n+---\n+ hlint/.hlint.yaml | 155 +++++++++++++++++++++++-----------------------\n+ 1 file changed, 77 insertions(+), 78 deletions(-)\n+\n+diff --git a/hlint/.hlint.yaml b/hlint/.hlint.yaml\n+index 1e09829..19356c5 100644\n+--- a/hlint/.hlint.yaml\n++++ b/hlint/.hlint.yaml\n+@@ -24,34 +24,33 @@\n+ # for ad hoc ways to suppress hlint.\n+ \n+ ---\n+-\n+ # By default, everything is an error\n+-- error: {name: \"\"}\n++- error: { name: \"\" }\n+ \n+ # Some things we don't care about at all\n+-- ignore: {name: \"Use module export list\"}\n+-- \n+2.47.1"
  },
  {
    "sha": "d871f1e8cabb68955cbfdd38cc1e9e3768c4668d",
    "filename": "run/example-patches/many-files.patch",
    "status": "added",
    "additions": 144,
    "deletions": 0,
    "changes": 144,
    "blob_url": "https://github.com/restyled-io/actions/blob/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fexample-patches%2Fmany-files.patch",
    "raw_url": "https://github.com/restyled-io/actions/raw/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fexample-patches%2Fmany-files.patch",
    "contents_url": "https://api.github.com/repos/restyled-io/actions/contents/run%2Fexample-patches%2Fmany-files.patch?ref=8672a7df4bc9edfea1ae062620328165196c11cf",
    "patch": "@@ -0,0 +1,144 @@\n+From a7696becf41fa2b5c9c93770e25a5cce6174d3b8 Mon Sep 17 00:00:00 2001\n+From: Daniel Nalborczyk <dnalborczyk@gmail.com>\n+Date: Sat, 11 Jan 2020 08:19:48 -0500\n+Subject: [PATCH] Fix path/resource/resourcePath in Lambda events, fixes #868\n+\n+---\n+ src/events/http/HttpServer.js                       |  2 ++\n+ .../http/lambda-events/LambdaIntegrationEvent.js    |  5 ++++-\n+ .../lambda-events/LambdaProxyIntegrationEvent.js    | 13 +++++++------\n+ src/events/http/lambda-events/VelocityContext.js    |  6 ++++--\n+ 4 files changed, 17 insertions(+), 9 deletions(-)\n+\n+diff --git a/src/events/http/HttpServer.js b/src/events/http/HttpServer.js\n+index c0fbe5a..ea7135b 100644\n+--- a/src/events/http/HttpServer.js\n++++ b/src/events/http/HttpServer.js\n+@@ -473,6 +473,7 @@ export default class HttpServer {\n+               request,\n+               this.#serverless.service.provider.stage,\n+               requestTemplate,\n++              _path,\n+             ).create()\n+           } catch (err) {\n+             return this._reply500(\n+@@ -488,6 +489,7 @@ export default class HttpServer {\n+         const lambdaProxyIntegrationEvent = new LambdaProxyIntegrationEvent(\n+           request,\n+           this.#serverless.service.provider.stage,\n++          _path,\n+         )\n+ \n+         event = lambdaProxyIntegrationEvent.create()\n+diff --git a/src/events/http/lambda-events/LambdaIntegrationEvent.js b/src/events/http/lambda-events/LambdaIntegrationEvent.js\n+index 4a9a0a4..c4a72d0 100644\n+--- a/src/events/http/lambda-events/LambdaIntegrationEvent.js\n++++ b/src/events/http/lambda-events/LambdaIntegrationEvent.js\n+@@ -2,11 +2,13 @@ import renderVelocityTemplateObject from './renderVelocityTemplateObject.js'\n+ import VelocityContext from './VelocityContext.js'\n+ \n+ export default class LambdaIntegrationEvent {\n++  #path = null\n+   #request = null\n+   #requestTemplate = null\n+   #stage = null\n+ \n+-  constructor(request, stage, requestTemplate) {\n++  constructor(request, stage, requestTemplate, path) {\n++    this.#path = path\n+     this.#request = request\n+     this.#requestTemplate = requestTemplate\n+     this.#stage = stage\n+@@ -17,6 +19,7 @@ export default class LambdaIntegrationEvent {\n+       this.#request,\n+       this.#stage,\n+       this.#request.payload || {},\n++      this.#path,\n+     ).getContext()\n+ \n+     const event = renderVelocityTemplateObject(\n+diff --git a/src/events/http/lambda-events/LambdaProxyIntegrationEvent.js b/src/events/http/lambda-events/LambdaProxyIntegrationEvent.js\n+index 12e388b..78ea853 100644\n+--- a/src/events/http/lambda-events/LambdaProxyIntegrationEvent.js\n++++ b/src/events/http/lambda-events/LambdaProxyIntegrationEvent.js\n+@@ -16,10 +16,12 @@ const { parse } = JSON\n+ // https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html\n+ // http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-api-as-simple-proxy-for-lambda.html\n+ export default class LambdaProxyIntegrationEvent {\n++  #path = null\n+   #request = null\n+   #stage = null\n+ \n+-  constructor(request, stage) {\n++  constructor(request, stage, path) {\n++    this.#path = path\n+     this.#request = request\n+     this.#stage = stage\n+   }\n+@@ -106,7 +108,6 @@ export default class LambdaProxyIntegrationEvent {\n+     const {\n+       info: { received, remoteAddress },\n+       method,\n+-      path,\n+     } = this.#request\n+ \n+     const httpMethod = method.toUpperCase()\n+@@ -125,7 +126,7 @@ export default class LambdaProxyIntegrationEvent {\n+       multiValueQueryStringParameters: parseMultiValueQueryStringParameters(\n+         url,\n+       ),\n+-      path,\n++      path: this.#path,\n+       pathParameters: nullIfEmpty(pathParams),\n+       queryStringParameters: parseQueryStringParameters(url),\n+       requestContext: {\n+@@ -170,16 +171,16 @@ export default class LambdaProxyIntegrationEvent {\n+           userAgent: this.#request.headers['user-agent'] || '',\n+           userArn: 'offlineContext_userArn',\n+         },\n+-        path: `/${this.#stage}${this.#request.route.path}`,\n++        path: this.#request.route.path,\n+         protocol: 'HTTP/1.1',\n+         requestId: createUniqueId(),\n+         requestTime,\n+         requestTimeEpoch,\n+         resourceId: 'offlineContext_resourceId',\n+-        resourcePath: this.#request.route.path,\n++        resourcePath: this.#path,\n+         stage: this.#stage,\n+       },\n+-      resource: this.#request.route.path,\n++      resource: this.#path,\n+       stageVariables: null,\n+     }\n+   }\n+diff --git a/src/events/http/lambda-events/VelocityContext.js b/src/events/http/lambda-events/VelocityContext.js\n+index 613c83b..7a490f4 100644\n+--- a/src/events/http/lambda-events/VelocityContext.js\n++++ b/src/events/http/lambda-events/VelocityContext.js\n+@@ -36,11 +36,13 @@ function escapeJavaScript(x) {\n+   http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n+ */\n+ export default class VelocityContext {\n++  #path = null\n+   #payload = null\n+   #request = null\n+   #stage = null\n+ \n+-  constructor(request, stage, payload) {\n++  constructor(request, stage, payload, path) {\n++    this.#path = path\n+     this.#payload = payload\n+     this.#request = request\n+     this.#stage = stage\n+@@ -106,7 +108,7 @@ export default class VelocityContext {\n+         },\n+         requestId: createUniqueId(),\n+         resourceId: 'offlineContext_resourceId',\n+-        resourcePath: this.#request.route.path,\n++        resourcePath: this.#path,\n+         stage: this.#stage,\n+       },\n+       input: {\n+-- \n+2.21.1 (Apple Git-122.3)"
  },
  {
    "sha": "faff03d30be4f00225d94d85d5203fa5a98dc682",
    "filename": "run/example-patches/many-patches.patch",
    "status": "added",
    "additions": 172,
    "deletions": 0,
    "changes": 172,
    "blob_url": "https://github.com/restyled-io/actions/blob/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fexample-patches%2Fmany-patches.patch",
    "raw_url": "https://github.com/restyled-io/actions/raw/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fexample-patches%2Fmany-patches.patch",
    "contents_url": "https://api.github.com/repos/restyled-io/actions/contents/run%2Fexample-patches%2Fmany-patches.patch?ref=8672a7df4bc9edfea1ae062620328165196c11cf",
    "patch": "@@ -0,0 +1,172 @@\n+From a7696becf41fa2b5c9c93770e25a5cce6174d3b8 Mon Sep 17 00:00:00 2001\n+From: Daniel Nalborczyk <dnalborczyk@gmail.com>\n+Date: Sat, 11 Jan 2020 08:19:48 -0500\n+Subject: [PATCH] Fix path/resource/resourcePath in Lambda events, fixes #868\n+\n+---\n+ src/events/http/HttpServer.js                       |  2 ++\n+ .../http/lambda-events/LambdaIntegrationEvent.js    |  5 ++++-\n+ .../lambda-events/LambdaProxyIntegrationEvent.js    | 13 +++++++------\n+ src/events/http/lambda-events/VelocityContext.js    |  6 ++++--\n+ 4 files changed, 17 insertions(+), 9 deletions(-)\n+\n+diff --git a/src/events/http/HttpServer.js b/src/events/http/HttpServer.js\n+index c0fbe5a..ea7135b 100644\n+--- a/src/events/http/HttpServer.js\n++++ b/src/events/http/HttpServer.js\n+@@ -473,6 +473,7 @@ export default class HttpServer {\n+               request,\n+               this.#serverless.service.provider.stage,\n+               requestTemplate,\n++              _path,\n+             ).create()\n+           } catch (err) {\n+             return this._reply500(\n+@@ -488,6 +489,7 @@ export default class HttpServer {\n+         const lambdaProxyIntegrationEvent = new LambdaProxyIntegrationEvent(\n+           request,\n+           this.#serverless.service.provider.stage,\n++          _path,\n+         )\n+ \n+         event = lambdaProxyIntegrationEvent.create()\n+diff --git a/src/events/http/lambda-events/LambdaIntegrationEvent.js b/src/events/http/lambda-events/LambdaIntegrationEvent.js\n+index 4a9a0a4..c4a72d0 100644\n+--- a/src/events/http/lambda-events/LambdaIntegrationEvent.js\n++++ b/src/events/http/lambda-events/LambdaIntegrationEvent.js\n+@@ -2,11 +2,13 @@ import renderVelocityTemplateObject from './renderVelocityTemplateObject.js'\n+ import VelocityContext from './VelocityContext.js'\n+ \n+ export default class LambdaIntegrationEvent {\n++  #path = null\n+   #request = null\n+   #requestTemplate = null\n+   #stage = null\n+ \n+-  constructor(request, stage, requestTemplate) {\n++  constructor(request, stage, requestTemplate, path) {\n++    this.#path = path\n+     this.#request = request\n+     this.#requestTemplate = requestTemplate\n+     this.#stage = stage\n+@@ -17,6 +19,7 @@ export default class LambdaIntegrationEvent {\n+       this.#request,\n+       this.#stage,\n+       this.#request.payload || {},\n++      this.#path,\n+     ).getContext()\n+ \n+     const event = renderVelocityTemplateObject(\n+diff --git a/src/events/http/lambda-events/LambdaProxyIntegrationEvent.js b/src/events/http/lambda-events/LambdaProxyIntegrationEvent.js\n+index 12e388b..78ea853 100644\n+--- a/src/events/http/lambda-events/LambdaProxyIntegrationEvent.js\n++++ b/src/events/http/lambda-events/LambdaProxyIntegrationEvent.js\n+@@ -16,10 +16,12 @@ const { parse } = JSON\n+ // https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html\n+ // http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-api-as-simple-proxy-for-lambda.html\n+ export default class LambdaProxyIntegrationEvent {\n++  #path = null\n+   #request = null\n+   #stage = null\n+ \n+-  constructor(request, stage) {\n++  constructor(request, stage, path) {\n++    this.#path = path\n+     this.#request = request\n+     this.#stage = stage\n+   }\n+@@ -106,7 +108,6 @@ export default class LambdaProxyIntegrationEvent {\n+     const {\n+       info: { received, remoteAddress },\n+       method,\n+-      path,\n+     } = this.#request\n+ \n+     const httpMethod = method.toUpperCase()\n+@@ -125,7 +126,7 @@ export default class LambdaProxyIntegrationEvent {\n+       multiValueQueryStringParameters: parseMultiValueQueryStringParameters(\n+         url,\n+       ),\n+-      path,\n++      path: this.#path,\n+       pathParameters: nullIfEmpty(pathParams),\n+       queryStringParameters: parseQueryStringParameters(url),\n+       requestContext: {\n+@@ -170,16 +171,16 @@ export default class LambdaProxyIntegrationEvent {\n+           userAgent: this.#request.headers['user-agent'] || '',\n+           userArn: 'offlineContext_userArn',\n+         },\n+-        path: `/${this.#stage}${this.#request.route.path}`,\n++        path: this.#request.route.path,\n+         protocol: 'HTTP/1.1',\n+         requestId: createUniqueId(),\n+         requestTime,\n+         requestTimeEpoch,\n+         resourceId: 'offlineContext_resourceId',\n+-        resourcePath: this.#request.route.path,\n++        resourcePath: this.#path,\n+         stage: this.#stage,\n+       },\n+-      resource: this.#request.route.path,\n++      resource: this.#path,\n+       stageVariables: null,\n+     }\n+   }\n+diff --git a/src/events/http/lambda-events/VelocityContext.js b/src/events/http/lambda-events/VelocityContext.js\n+index 613c83b..7a490f4 100644\n+--- a/src/events/http/lambda-events/VelocityContext.js\n++++ b/src/events/http/lambda-events/VelocityContext.js\n+@@ -36,11 +36,13 @@ function escapeJavaScript(x) {\n+   http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n+ */\n+ export default class VelocityContext {\n++  #path = null\n+   #payload = null\n+   #request = null\n+   #stage = null\n+ \n+-  constructor(request, stage, payload) {\n++  constructor(request, stage, payload, path) {\n++    this.#path = path\n+     this.#payload = payload\n+     this.#request = request\n+     this.#stage = stage\n+@@ -106,7 +108,7 @@ export default class VelocityContext {\n+         },\n+         requestId: createUniqueId(),\n+         resourceId: 'offlineContext_resourceId',\n+-        resourcePath: this.#request.route.path,\n++        resourcePath: this.#path,\n+         stage: this.#stage,\n+       },\n+       input: {\n+-- \n+2.21.1 (Apple Git-122.3)\n+\n+\n+From 0f6f88c98fff3afa0289f46bf4eab469f45eebc6 Mon Sep 17 00:00:00 2001\n+From: Arnas Gecas <13507001+arnas@users.noreply.github.com>\n+Date: Sat, 25 Jan 2020 19:21:35 +0200\n+Subject: [PATCH] JSON stringify string responses\n+\n+---\n+ src/events/http/HttpServer.js | 4 +++-\n+ 1 file changed, 3 insertions(+), 1 deletion(-)\n+\n+diff --git a/src/events/http/HttpServer.js b/src/events/http/HttpServer.js\n+index 20bf454..c0fdafb 100644\n+--- a/src/events/http/HttpServer.js\n++++ b/src/events/http/HttpServer.js\n+@@ -770,7 +770,9 @@ export default class HttpServer {\n+           override: false,\n+         })\n+ \n+-        if (result && typeof result.body !== 'undefined') {\n++        if (typeof result === 'string') {\n++          response.source = JSON.stringify(result)\n++        } else if (result && typeof result.body !== 'undefined') {\n+           if (result.isBase64Encoded) {\n+             response.encoding = 'binary'\n+             response.source = Buffer.from(result.body, 'base64')\n+-- \n+2.21.1 (Apple Git-122.3)"
  },
  {
    "sha": "90497fb76144b94e51580ce509ae0d61f62676f6",
    "filename": "run/example-patches/one-file-diff.patch",
    "status": "added",
    "additions": 15,
    "deletions": 0,
    "changes": 15,
    "blob_url": "https://github.com/restyled-io/actions/blob/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fexample-patches%2Fone-file-diff.patch",
    "raw_url": "https://github.com/restyled-io/actions/raw/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fexample-patches%2Fone-file-diff.patch",
    "contents_url": "https://api.github.com/repos/restyled-io/actions/contents/run%2Fexample-patches%2Fone-file-diff.patch?ref=8672a7df4bc9edfea1ae062620328165196c11cf",
    "patch": "@@ -0,0 +1,15 @@\n+diff --git a/src/events/http/HttpServer.js b/src/events/http/HttpServer.js\n+index 20bf454..c0fdafb 100644\n+--- a/src/events/http/HttpServer.js\n++++ b/src/events/http/HttpServer.js\n+@@ -770,7 +770,9 @@ export default class HttpServer {\n+           override: false,\n+         })\n+ \n+-        if (result && typeof result.body !== 'undefined') {\n++        if (typeof result === 'string') {\n++          response.source = JSON.stringify(result)\n++        } else if (result && typeof result.body !== 'undefined') {\n+           if (result.isBase64Encoded) {\n+             response.encoding = 'binary'\n+             response.source = Buffer.from(result.body, 'base64')"
  },
  {
    "sha": "013ab9c9695e58a9ad1e9a52f4fa7d25cd3d5812",
    "filename": "run/example-patches/one-file.patch",
    "status": "added",
    "additions": 26,
    "deletions": 0,
    "changes": 26,
    "blob_url": "https://github.com/restyled-io/actions/blob/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fexample-patches%2Fone-file.patch",
    "raw_url": "https://github.com/restyled-io/actions/raw/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fexample-patches%2Fone-file.patch",
    "contents_url": "https://api.github.com/repos/restyled-io/actions/contents/run%2Fexample-patches%2Fone-file.patch?ref=8672a7df4bc9edfea1ae062620328165196c11cf",
    "patch": "@@ -0,0 +1,26 @@\n+From 0f6f88c98fff3afa0289f46bf4eab469f45eebc6 Mon Sep 17 00:00:00 2001\n+From: Arnas Gecas <13507001+arnas@users.noreply.github.com>\n+Date: Sat, 25 Jan 2020 19:21:35 +0200\n+Subject: [PATCH] JSON stringify string responses\n+\n+---\n+ src/events/http/HttpServer.js | 4 +++-\n+ 1 file changed, 3 insertions(+), 1 deletion(-)\n+\n+diff --git a/src/events/http/HttpServer.js b/src/events/http/HttpServer.js\n+index 20bf454..c0fdafb 100644\n+--- a/src/events/http/HttpServer.js\n++++ b/src/events/http/HttpServer.js\n+@@ -770,7 +770,9 @@ export default class HttpServer {\n+           override: false,\n+         })\n+ \n+-        if (result && typeof result.body !== 'undefined') {\n++        if (typeof result === 'string') {\n++          response.source = JSON.stringify(result)\n++        } else if (result && typeof result.body !== 'undefined') {\n+           if (result.isBase64Encoded) {\n+             response.encoding = 'binary'\n+             response.source = Buffer.from(result.body, 'base64')\n+-- \n+2.21.1 (Apple Git-122.3)"
  },
  {
    "sha": "2d58eee25bf378aa66ec47760f16890869fed487",
    "filename": "run/example-patches/rename-file.patch",
    "status": "added",
    "additions": 16,
    "deletions": 0,
    "changes": 16,
    "blob_url": "https://github.com/restyled-io/actions/blob/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fexample-patches%2Frename-file.patch",
    "raw_url": "https://github.com/restyled-io/actions/raw/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fexample-patches%2Frename-file.patch",
    "contents_url": "https://api.github.com/repos/restyled-io/actions/contents/run%2Fexample-patches%2Frename-file.patch?ref=8672a7df4bc9edfea1ae062620328165196c11cf",
    "patch": "@@ -0,0 +1,16 @@\n+From 68ec4bbde5244929afee1b39e09dced6fad1a725 Mon Sep 17 00:00:00 2001\n+From: =?UTF-8?q?David=20H=C3=A9rault?= <dherault@gmail.com>\n+Date: Mon, 27 Jan 2020 17:35:01 +0100\n+Subject: [PATCH] Rename README\n+\n+---\n+ README.md => README.mdx | 0\n+ 1 file changed, 0 insertions(+), 0 deletions(-)\n+ rename README.md => README.mdx (100%)\n+\n+diff --git a/README.md b/README.mdx\n+similarity index 100%\n+rename from README.md\n+rename to README.mdx\n+-- \n+2.21.1 (Apple Git-122.3)"
  },
  {
    "sha": "763ddb27280a2fd68326f810b59f29cffb19bf68",
    "filename": "run/example-patches/two-file-diff.patch",
    "status": "added",
    "additions": 30,
    "deletions": 0,
    "changes": 30,
    "blob_url": "https://github.com/restyled-io/actions/blob/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fexample-patches%2Ftwo-file-diff.patch",
    "raw_url": "https://github.com/restyled-io/actions/raw/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fexample-patches%2Ftwo-file-diff.patch",
    "contents_url": "https://api.github.com/repos/restyled-io/actions/contents/run%2Fexample-patches%2Ftwo-file-diff.patch?ref=8672a7df4bc9edfea1ae062620328165196c11cf",
    "patch": "@@ -0,0 +1,30 @@\n+diff --git a/src/events/http/HttpServer.js b/src/events/http/HttpServer.js\n+index 20bf454..c0fdafb 100644\n+--- a/src/events/http/HttpServer.js\n++++ b/src/events/http/HttpServer.js\n+@@ -770,7 +770,9 @@ export default class HttpServer {\n+           override: false,\n+         })\n+ \n+-        if (result && typeof result.body !== 'undefined') {\n++        if (typeof result === 'string') {\n++          response.source = JSON.stringify(result)\n++        } else if (result && typeof result.body !== 'undefined') {\n+           if (result.isBase64Encoded) {\n+             response.encoding = 'binary'\n+             response.source = Buffer.from(result.body, 'base64')\n+diff --git a/hlint/.hlint.yaml b/hlint/.hlint.yaml\n+index 1e09829..19356c5 100644\n+--- a/hlint/.hlint.yaml\n++++ b/hlint/.hlint.yaml\n+@@ -24,34 +24,33 @@\n+ # for ad hoc ways to suppress hlint.\n+ \n+ ---\n+-\n+ # By default, everything is an error\n+-- error: {name: \"\"}\n++- error: { name: \"\" }\n+ \n+ # Some things we don't care about at all\n+-- ignore: {name: \"Use module export list\"}"
  },
  {
    "sha": "9a852997aaa3305ae415d8048278a2496f9be219",
    "filename": "run/package.json",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/restyled-io/actions/blob/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fpackage.json",
    "raw_url": "https://github.com/restyled-io/actions/raw/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fpackage.json",
    "contents_url": "https://api.github.com/repos/restyled-io/actions/contents/run%2Fpackage.json?ref=8672a7df4bc9edfea1ae062620328165196c11cf",
    "patch": "@@ -17,7 +17,6 @@\n     \"@actions/github\": \"^6.0.0\",\n     \"@types/temp\": \"^0.9.4\",\n     \"action-docs\": \"^2.5.1\",\n-    \"parse-git-patch\": \"^2.0.0\",\n     \"temp\": \"^0.9.4\"\n   },\n   \"devDependencies\": {"
  },
  {
    "sha": "9b72a70595460f55dbc1fd33a49bfdf8b86b4abb",
    "filename": "run/src/hunk.test.ts",
    "status": "removed",
    "additions": 0,
    "deletions": 74,
    "changes": 74,
    "blob_url": "https://github.com/restyled-io/actions/blob/600e9d919ad087ff97c944d39dd789cebc0c8c71/run%2Fsrc%2Fhunk.test.ts",
    "raw_url": "https://github.com/restyled-io/actions/raw/600e9d919ad087ff97c944d39dd789cebc0c8c71/run%2Fsrc%2Fhunk.test.ts",
    "contents_url": "https://api.github.com/repos/restyled-io/actions/contents/run%2Fsrc%2Fhunk.test.ts?ref=600e9d919ad087ff97c944d39dd789cebc0c8c71",
    "patch": "@@ -1,74 +0,0 @@\n-/* Copyright (C) 2024 Patrick Brisbin\n- *\n- * This program is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n- */\n-import { Hunks } from \"./hunk\";\n-import * as NE from \"./non-empty\";\n-\n-const hunkLine = (x: number) => {\n-  return { lineNumber: x };\n-};\n-\n-const hunk = (x: number, ...xs: number[]) => {\n-  const ys = xs.map((x) => {\n-    return hunkLine(x);\n-  });\n-  return NE.build(hunkLine(x), ...ys);\n-};\n-\n-const hunks = new Hunks([\n-  hunkLine(1),\n-  hunkLine(2),\n-  hunkLine(3),\n-  hunkLine(7),\n-  hunkLine(8),\n-  hunkLine(12),\n-  hunkLine(13),\n-  hunkLine(14),\n-  hunkLine(15),\n-]);\n-\n-describe(\"Hunks\", () => {\n-  describe(\"get\", () => {\n-    it(\"gets contiguous hunks of lines by first lineNumber\", () => {\n-      expect(hunks.get(1)).toEqual(hunk(1, 2, 3));\n-      expect(hunks.get(7)).toEqual(hunk(7, 8));\n-      expect(hunks.get(12)).toEqual(hunk(12, 13, 14, 15));\n-    });\n-\n-    it(\"returns null for non-first-line lookups\", () => {\n-      expect(hunks.get(-1)).toBeNull();\n-      expect(hunks.get(0)).toBeNull();\n-      expect(hunks.get(2)).toBeNull();\n-      expect(hunks.get(3)).toBeNull();\n-      expect(hunks.get(4)).toBeNull();\n-      expect(hunks.get(5)).toBeNull();\n-      expect(hunks.get(6)).toBeNull();\n-      expect(hunks.get(9)).toBeNull();\n-      expect(hunks.get(10)).toBeNull();\n-      expect(hunks.get(11)).toBeNull();\n-      expect(hunks.get(16)).toBeNull();\n-    });\n-  });\n-\n-  describe(\"contain\", () => {\n-    it(\"returns true if a hunk is wholly contained in any of the hunks\", () => {\n-      expect(hunks.contain(hunk(2, 3))).toBeTruthy();\n-    });\n-\n-    it(\"returns false if a hunk is not contained any of the hunks\", () => {\n-      expect(hunks.contain(hunk(2, 3, 4))).toBeFalsy();\n-    });\n-  });\n-});"
  },
  {
    "sha": "f041e9f773eb711da319b95da0cb847158013630",
    "filename": "run/src/hunk.ts",
    "status": "removed",
    "additions": 0,
    "deletions": 82,
    "changes": 82,
    "blob_url": "https://github.com/restyled-io/actions/blob/600e9d919ad087ff97c944d39dd789cebc0c8c71/run%2Fsrc%2Fhunk.ts",
    "raw_url": "https://github.com/restyled-io/actions/raw/600e9d919ad087ff97c944d39dd789cebc0c8c71/run%2Fsrc%2Fhunk.ts",
    "contents_url": "https://api.github.com/repos/restyled-io/actions/contents/run%2Fsrc%2Fhunk.ts?ref=600e9d919ad087ff97c944d39dd789cebc0c8c71",
    "patch": "@@ -1,82 +0,0 @@\n-/* Copyright (C) 2024 Patrick Brisbin\n- *\n- * This program is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n- */\n-import { type NonEmpty } from \"./non-empty\";\n-import * as NE from \"./non-empty\";\n-\n-export interface HasLineNumber {\n-  lineNumber: number;\n-}\n-\n-export type HunkLine<T> = T & HasLineNumber;\n-\n-export type Hunk<T> = NonEmpty<HunkLine<T>>;\n-\n-export class Hunks<T> {\n-  private map: Map<number, Hunk<T>>;\n-  private lastHunk: number;\n-  private lastLine: number;\n-\n-  constructor(lines: HunkLine<T>[]) {\n-    this.map = new Map();\n-    this.lastHunk = -99;\n-    this.lastLine = -99;\n-\n-    lines.forEach((line) => this.add(line));\n-  }\n-\n-  get(lineNumber: number): Hunk<T> | null {\n-    return this.map.get(lineNumber) || null;\n-  }\n-\n-  forEach(f: (hunk: Hunk<T>) => void): void {\n-    this.hunks().forEach(f);\n-  }\n-\n-  contain(hunk: Hunk<T>): boolean {\n-    return this.hunks().some((x) => {\n-      return (\n-        NE.head(hunk).lineNumber >= NE.head(x).lineNumber &&\n-        NE.last(hunk).lineNumber <= NE.last(x).lineNumber\n-      );\n-    });\n-  }\n-\n-  lines(): number[] {\n-    return this.hunks().flatMap((hunk) => {\n-      return NE.toList(hunk).map((x) => x.lineNumber);\n-    });\n-  }\n-\n-  private add(line: HunkLine<T>) {\n-    const current = this.get(this.lastHunk);\n-    const isSameLine = line.lineNumber === this.lastLine;\n-    const isNextLine = line.lineNumber === this.lastLine + 1;\n-\n-    if (current && (isSameLine || isNextLine)) {\n-      const updated = NE.append(current, NE.singleton(line));\n-      this.map.set(this.lastHunk, updated);\n-    } else {\n-      this.map.set(line.lineNumber, NE.singleton(line));\n-      this.lastHunk = line.lineNumber;\n-    }\n-\n-    this.lastLine = line.lineNumber;\n-  }\n-\n-  private hunks(): Hunk<T>[] {\n-    return Array.from(this.map.values());\n-  }\n-}"
  },
  {
    "sha": "00f291b29a006fe8636bfcc3f8cf39ef87fcd6f0",
    "filename": "run/src/list.test.ts",
    "status": "added",
    "additions": 55,
    "deletions": 0,
    "changes": 55,
    "blob_url": "https://github.com/restyled-io/actions/blob/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fsrc%2Flist.test.ts",
    "raw_url": "https://github.com/restyled-io/actions/raw/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fsrc%2Flist.test.ts",
    "contents_url": "https://api.github.com/repos/restyled-io/actions/contents/run%2Fsrc%2Flist.test.ts?ref=8672a7df4bc9edfea1ae062620328165196c11cf",
    "patch": "@@ -0,0 +1,55 @@\n+/* Copyright (C) 2024 Patrick Brisbin\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n+ */\n+import { last, group, groupBy } from \"./list\";\n+\n+describe(\"last\", () => {\n+  it(\"gets the last element of a non-empty array\", () => {\n+    expect(last([1, 2, 3])).toEqual(3);\n+  });\n+\n+  it(\"returns null for an empty array\", () => {\n+    expect(last([])).toBeNull();\n+  });\n+});\n+\n+describe(\"group\", () => {\n+  it(\"groups equal elements\", () => {\n+    const actual = group([1, 2, 2, 3, 2, 4, 5, 5, 5, 6]);\n+    const expected = [[1], [2, 2], [3], [2], [4], [5, 5, 5], [6]];\n+\n+    expect(actual).toEqual(expected);\n+  });\n+});\n+\n+describe(\"groupBy\", () => {\n+  it(\"groups elements by custom comparison\", () => {\n+    const sameFirstLetter = (a: string, b: string): boolean => {\n+      return a[0] === b[0];\n+    };\n+    const actual = groupBy(\n+      [\"apple\", \"adam\", \"banana\", \"bake\", \"about\", \"pie\"],\n+      sameFirstLetter,\n+    );\n+    const expected = [\n+      [\"apple\", \"adam\"],\n+      [\"banana\", \"bake\"],\n+      [\"about\"],\n+      [\"pie\"],\n+    ];\n+\n+    expect(actual).toEqual(expected);\n+  });\n+});"
  },
  {
    "sha": "2f99e9d88c84ac383eb81a0f261cd9577a515746",
    "filename": "run/src/list.ts",
    "status": "renamed",
    "additions": 17,
    "deletions": 29,
    "changes": 46,
    "blob_url": "https://github.com/restyled-io/actions/blob/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fsrc%2Flist.ts",
    "raw_url": "https://github.com/restyled-io/actions/raw/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fsrc%2Flist.ts",
    "contents_url": "https://api.github.com/repos/restyled-io/actions/contents/run%2Fsrc%2Flist.ts?ref=8672a7df4bc9edfea1ae062620328165196c11cf",
    "patch": "@@ -13,41 +13,29 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n  */\n-import { type ParsedPatchType } from \"parse-git-patch\";\n-import parseGitPatch from \"parse-git-patch\";\n-\n-const PATCH_BEGIN = /^From /;\n-\n-export function parsePatches(str: string): ParsedPatchType[] {\n-  const patches: ParsedPatchType[] = [];\n+export function last<T>(xs: T[]): T | null {\n+  return xs.slice(-1)[0] ?? null;\n+}\n \n-  let patchLines: string[] = [];\n+export function group<T>(xs: T[]): T[][] {\n+  return groupBy(xs, (a, b) => a === b);\n+}\n \n-  // Parse what we have so far and reset lines\n-  const accumulate = () => {\n-    if (patchLines.length === 0) {\n-      return;\n-    }\n+export function groupBy<T>(xs: T[], isEqual: (a: T, b: T) => boolean): T[][] {\n+  const go = (acc: T[][], x: T): T[][] => {\n+    const prevGroup: T[] | null = last(acc);\n \n-    const parsed = parseGitPatch(patchLines.join(\"\\n\"));\n+    if (prevGroup) {\n+      const prevElem = last(prevGroup);\n \n-    if (!parsed) {\n-      return;\n+      if (prevElem && isEqual(prevElem, x)) {\n+        prevGroup.push(x); // ick\n+        return acc;\n+      }\n     }\n \n-    patches.push(parsed);\n-    patchLines = [];\n+    return acc.concat([[x]]);\n   };\n \n-  str.split(\"\\n\").forEach((line) => {\n-    if (line.match(PATCH_BEGIN)) {\n-      accumulate();\n-    }\n-\n-    patchLines.push(line);\n-  });\n-\n-  accumulate();\n-\n-  return patches;\n+  return xs.reduce(go, []);\n }",
    "previous_filename": "run/src/patch.ts"
  },
  {
    "sha": "1001fa7eca465cbecd074f0db1dd893b57372f65",
    "filename": "run/src/main.ts",
    "status": "modified",
    "additions": 8,
    "deletions": 9,
    "changes": 17,
    "blob_url": "https://github.com/restyled-io/actions/blob/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fsrc%2Fmain.ts",
    "raw_url": "https://github.com/restyled-io/actions/raw/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fsrc%2Fmain.ts",
    "contents_url": "https://api.github.com/repos/restyled-io/actions/contents/run%2Fsrc%2Fmain.ts?ref=8672a7df4bc9edfea1ae062620328165196c11cf",
    "patch": "@@ -17,13 +17,12 @@ import * as core from \"@actions/core\";\n import * as github from \"@actions/github\";\n import * as exec from \"@actions/exec\";\n \n-import { clearPriorSuggestions, commentSuggestion } from \"./review-comments\";\n import { cliArguments, getInputs } from \"./inputs\";\n-import { getPullRequest } from \"./pull-request\";\n-import { getSuggestions } from \"./suggestions\";\n-import { parsePatches } from \"./patch\";\n-import { readProcess } from \"./process\";\n import { setOutputs } from \"./outputs\";\n+import { readProcess } from \"./process\";\n+import { getPullRequest } from \"./pull-request\";\n+import { clearPriorSuggestions, commentSuggestion } from \"./review-comments\";\n+import { suggest } from \"./suggest\";\n \n function pullRequestDescription(number: number): string {\n   return `\n@@ -102,11 +101,11 @@ async function run() {\n     if (inputs.suggestions && success) {\n       const resolved = await clearPriorSuggestions(client, pr);\n \n-      if (pr.diff && differences) {\n+      if (differences) {\n+        const suggestions = suggest(pr.files, resolved, patch);\n+\n         let n = 0;\n-        const bases = parsePatches(pr.diff);\n-        const patches = parsePatches(patch);\n-        const ps = getSuggestions(bases, patches, resolved).map((s) => {\n+        const ps = suggestions.map((s) => {\n           if (s.skipReason) {\n             const line =\n               s.startLine !== s.endLine"
  },
  {
    "sha": "7103294187e7aaa5b51585530d13af9998af7655",
    "filename": "run/src/parse-git-patch.test.ts",
    "status": "added",
    "additions": 573,
    "deletions": 0,
    "changes": 573,
    "blob_url": "https://github.com/restyled-io/actions/blob/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fsrc%2Fparse-git-patch.test.ts",
    "raw_url": "https://github.com/restyled-io/actions/raw/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fsrc%2Fparse-git-patch.test.ts",
    "contents_url": "https://api.github.com/repos/restyled-io/actions/contents/run%2Fsrc%2Fparse-git-patch.test.ts?ref=8672a7df4bc9edfea1ae062620328165196c11cf",
    "patch": "@@ -0,0 +1,573 @@\n+import * as fs from \"fs\";\n+import * as path from \"path\";\n+import {\n+  Patch,\n+  PatchLine,\n+  parseGitPatches,\n+  parseGitPatch,\n+} from \"./parse-git-patch\";\n+\n+const dataLocation = path.resolve(__dirname, \"../example-patches\");\n+const data: Record<string, string> = {};\n+\n+fs.readdirSync(dataLocation).forEach((fileName) => {\n+  data[fileName] = fs.readFileSync(\n+    path.resolve(dataLocation, fileName),\n+    \"utf-8\",\n+  );\n+});\n+\n+test(\"parses a multi-patch file\", () => {\n+  const input = data[\"many-patches.patch\"];\n+  const patches = parseGitPatches(input);\n+\n+  expect(patches.length).toEqual(2);\n+\n+  expect(rerender(patches[0])).toEqual(\n+    `\n+hash: a7696becf41fa2b5c9c93770e25a5cce6174d3b8\n+message: [PATCH] Fix path/resource/resourcePath in Lambda events, fixes #868\n+authorName: Daniel Nalborczyk\n+authorEmail: dnalborczyk@gmail.com\n+date: Sat, 11 Jan 2020 08:19:48 -0500\n+--\n+added: false\n+deleted: false\n+beforeName: src/events/http/HttpServer.js\n+afterName: src/events/http/HttpServer.js\n+--\n+| 473 | 473 |               request,\n+| 474 | 474 |               this.#serverless.service.provider.stage,\n+| 475 | 475 |               requestTemplate,\n+|     | 476 |+              _path,\n+| 476 | 477 |             ).create()\n+| 477 | 478 |           } catch (err) {\n+| 478 | 479 |             return this._reply500(\n+| 488 | 489 |         const lambdaProxyIntegrationEvent = new LambdaProxyIntegrationEvent(\n+| 489 | 490 |           request,\n+| 490 | 491 |           this.#serverless.service.provider.stage,\n+|     | 492 |+          _path,\n+| 491 | 493 |         )\n+| 492 | 494 | \n+| 493 | 495 |         event = lambdaProxyIntegrationEvent.create()\n+added: false\n+deleted: false\n+beforeName: src/events/http/lambda-events/LambdaIntegrationEvent.js\n+afterName: src/events/http/lambda-events/LambdaIntegrationEvent.js\n+--\n+|   2 |   2 | import VelocityContext from './VelocityContext.js'\n+|   3 |   3 | \n+|   4 |   4 | export default class LambdaIntegrationEvent {\n+|     |   5 |+  #path = null\n+|   5 |   6 |   #request = null\n+|   6 |   7 |   #requestTemplate = null\n+|   7 |   8 |   #stage = null\n+|   8 |   9 | \n+|   9 |     |-  constructor(request, stage, requestTemplate) {\n+|     |  10 |+  constructor(request, stage, requestTemplate, path) {\n+|     |  11 |+    this.#path = path\n+|  10 |  12 |     this.#request = request\n+|  11 |  13 |     this.#requestTemplate = requestTemplate\n+|  12 |  14 |     this.#stage = stage\n+|  17 |  19 |       this.#request,\n+|  18 |  20 |       this.#stage,\n+|  19 |  21 |       this.#request.payload || {},\n+|     |  22 |+      this.#path,\n+|  20 |  23 |     ).getContext()\n+|  21 |  24 | \n+|  22 |  25 |     const event = renderVelocityTemplateObject(\n+added: false\n+deleted: false\n+beforeName: src/events/http/lambda-events/LambdaProxyIntegrationEvent.js\n+afterName: src/events/http/lambda-events/LambdaProxyIntegrationEvent.js\n+--\n+|  16 |  16 | // https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html\n+|  17 |  17 | // http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-api-as-simple-proxy-for-lambda.html\n+|  18 |  18 | export default class LambdaProxyIntegrationEvent {\n+|     |  19 |+  #path = null\n+|  19 |  20 |   #request = null\n+|  20 |  21 |   #stage = null\n+|  21 |  22 | \n+|  22 |     |-  constructor(request, stage) {\n+|     |  23 |+  constructor(request, stage, path) {\n+|     |  24 |+    this.#path = path\n+|  23 |  25 |     this.#request = request\n+|  24 |  26 |     this.#stage = stage\n+|  25 |  27 |   }\n+| 106 | 108 |     const {\n+| 107 | 109 |       info: { received, remoteAddress },\n+| 108 | 110 |       method,\n+| 109 |     |-      path,\n+| 110 | 111 |     } = this.#request\n+| 111 | 112 | \n+| 112 | 113 |     const httpMethod = method.toUpperCase()\n+| 125 | 126 |       multiValueQueryStringParameters: parseMultiValueQueryStringParameters(\n+| 126 | 127 |         url,\n+| 127 | 128 |       ),\n+| 128 |     |-      path,\n+|     | 129 |+      path: this.#path,\n+| 129 | 130 |       pathParameters: nullIfEmpty(pathParams),\n+| 130 | 131 |       queryStringParameters: parseQueryStringParameters(url),\n+| 131 | 132 |       requestContext: {\n+| 170 | 171 |           userAgent: this.#request.headers['user-agent'] || '',\n+| 171 | 172 |           userArn: 'offlineContext_userArn',\n+| 172 | 173 |         },\n+| 173 |     |-        path: \\`/\\${this.#stage}\\${this.#request.route.path}\\`,\n+|     | 174 |+        path: this.#request.route.path,\n+| 174 | 175 |         protocol: 'HTTP/1.1',\n+| 175 | 176 |         requestId: createUniqueId(),\n+| 176 | 177 |         requestTime,\n+| 177 | 178 |         requestTimeEpoch,\n+| 178 | 179 |         resourceId: 'offlineContext_resourceId',\n+| 179 |     |-        resourcePath: this.#request.route.path,\n+|     | 180 |+        resourcePath: this.#path,\n+| 180 | 181 |         stage: this.#stage,\n+| 181 | 182 |       },\n+| 182 |     |-      resource: this.#request.route.path,\n+|     | 183 |+      resource: this.#path,\n+| 183 | 184 |       stageVariables: null,\n+| 184 | 185 |     }\n+| 185 | 186 |   }\n+added: false\n+deleted: false\n+beforeName: src/events/http/lambda-events/VelocityContext.js\n+afterName: src/events/http/lambda-events/VelocityContext.js\n+--\n+|  36 |  36 |   http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n+|  37 |  37 | */\n+|  38 |  38 | export default class VelocityContext {\n+|     |  39 |+  #path = null\n+|  39 |  40 |   #payload = null\n+|  40 |  41 |   #request = null\n+|  41 |  42 |   #stage = null\n+|  42 |  43 | \n+|  43 |     |-  constructor(request, stage, payload) {\n+|     |  44 |+  constructor(request, stage, payload, path) {\n+|     |  45 |+    this.#path = path\n+|  44 |  46 |     this.#payload = payload\n+|  45 |  47 |     this.#request = request\n+|  46 |  48 |     this.#stage = stage\n+| 106 | 108 |         },\n+| 107 | 109 |         requestId: createUniqueId(),\n+| 108 | 110 |         resourceId: 'offlineContext_resourceId',\n+| 109 |     |-        resourcePath: this.#request.route.path,\n+|     | 111 |+        resourcePath: this.#path,\n+| 110 | 112 |         stage: this.#stage,\n+| 111 | 113 |       },\n+| 112 | 114 |       input: {\n+`.trim(),\n+  );\n+\n+  expect(rerender(patches[1])).toEqual(\n+    `\n+hash: 0f6f88c98fff3afa0289f46bf4eab469f45eebc6\n+message: [PATCH] JSON stringify string responses\n+authorName: Arnas Gecas\n+authorEmail: 13507001+arnas@users.noreply.github.com\n+date: Sat, 25 Jan 2020 19:21:35 +0200\n+--\n+added: false\n+deleted: false\n+beforeName: src/events/http/HttpServer.js\n+afterName: src/events/http/HttpServer.js\n+--\n+| 770 | 770 |           override: false,\n+| 771 | 771 |         })\n+| 772 | 772 | \n+| 773 |     |-        if (result && typeof result.body !== 'undefined') {\n+|     | 773 |+        if (typeof result === 'string') {\n+|     | 774 |+          response.source = JSON.stringify(result)\n+|     | 775 |+        } else if (result && typeof result.body !== 'undefined') {\n+| 774 | 776 |           if (result.isBase64Encoded) {\n+| 775 | 777 |             response.encoding = 'binary'\n+| 776 | 778 |             response.source = Buffer.from(result.body, 'base64')\n+`.trim(),\n+  );\n+});\n+\n+test(\"parses a one-file patch\", () => {\n+  const patch = loadFixture(\"one-file\");\n+\n+  expect(rerender(patch, 3)).toEqual(\n+    `\n+hash: 0f6f88c98fff3afa0289f46bf4eab469f45eebc6\n+message: [PATCH] JSON stringify string responses\n+authorName: Arnas Gecas\n+authorEmail: 13507001+arnas@users.noreply.github.com\n+date: Sat, 25 Jan 2020 19:21:35 +0200\n+--\n+added: false\n+deleted: false\n+beforeName: src/events/http/HttpServer.js\n+afterName: src/events/http/HttpServer.js\n+--\n+| 770 | 770 |           override: false,\n+| 771 | 771 |         })\n+| 772 | 772 | \n+| 773 |     |-        if (result && typeof result.body !== 'undefined') {\n+|     | 773 |+        if (typeof result === 'string') {\n+|     | 774 |+          response.source = JSON.stringify(result)\n+|     | 775 |+        } else if (result && typeof result.body !== 'undefined') {\n+| 774 | 776 |           if (result.isBase64Encoded) {\n+| 775 | 777 |             response.encoding = 'binary'\n+| 776 | 778 |             response.source = Buffer.from(result.body, 'base64')\n+  `.trim(),\n+  );\n+});\n+\n+test(\"parses a diff without patch info\", () => {\n+  const patch = loadFixture(\"one-file-diff\");\n+\n+  expect(rerender(patch, 3)).toEqual(\n+    `\n+hash: undefined\n+message: undefined\n+authorName: undefined\n+authorEmail: undefined\n+date: undefined\n+--\n+added: false\n+deleted: false\n+beforeName: src/events/http/HttpServer.js\n+afterName: src/events/http/HttpServer.js\n+--\n+| 770 | 770 |           override: false,\n+| 771 | 771 |         })\n+| 772 | 772 | \n+| 773 |     |-        if (result && typeof result.body !== 'undefined') {\n+|     | 773 |+        if (typeof result === 'string') {\n+|     | 774 |+          response.source = JSON.stringify(result)\n+|     | 775 |+        } else if (result && typeof result.body !== 'undefined') {\n+| 774 | 776 |           if (result.isBase64Encoded) {\n+| 775 | 777 |             response.encoding = 'binary'\n+| 776 | 778 |             response.source = Buffer.from(result.body, 'base64')\n+  `.trim(),\n+  );\n+});\n+\n+test(\"parses a multi-file diff only\", () => {\n+  const patch = loadFixture(\"two-file-diff\");\n+\n+  expect(rerender(patch, 3)).toEqual(\n+    `\n+hash: undefined\n+message: undefined\n+authorName: undefined\n+authorEmail: undefined\n+date: undefined\n+--\n+added: false\n+deleted: false\n+beforeName: src/events/http/HttpServer.js\n+afterName: src/events/http/HttpServer.js\n+--\n+| 770 | 770 |           override: false,\n+| 771 | 771 |         })\n+| 772 | 772 | \n+| 773 |     |-        if (result && typeof result.body !== 'undefined') {\n+|     | 773 |+        if (typeof result === 'string') {\n+|     | 774 |+          response.source = JSON.stringify(result)\n+|     | 775 |+        } else if (result && typeof result.body !== 'undefined') {\n+| 774 | 776 |           if (result.isBase64Encoded) {\n+| 775 | 777 |             response.encoding = 'binary'\n+| 776 | 778 |             response.source = Buffer.from(result.body, 'base64')\n+added: false\n+deleted: false\n+beforeName: hlint/.hlint.yaml\n+afterName: hlint/.hlint.yaml\n+--\n+|  24 |  24 | # for ad hoc ways to suppress hlint.\n+|  25 |  25 | \n+|  26 |  26 | ---\n+|  27 |     |-\n+|  28 |  27 | # By default, everything is an error\n+|  29 |     |-- error: {name: \"\"}\n+|     |  28 |+- error: { name: \"\" }\n+|  30 |  29 | \n+|  31 |  30 | # Some things we don't care about at all\n+|  32 |     |-- ignore: {name: \"Use module export list\"}\n+  `.trim(),\n+  );\n+});\n+\n+test(\"parses a complex patch\", () => {\n+  const patch = loadFixture(\"many-files\");\n+\n+  expect(rerender(patch, 3)).toEqual(\n+    `\n+hash: a7696becf41fa2b5c9c93770e25a5cce6174d3b8\n+message: [PATCH] Fix path/resource/resourcePath in Lambda events, fixes #868\n+authorName: Daniel Nalborczyk\n+authorEmail: dnalborczyk@gmail.com\n+date: Sat, 11 Jan 2020 08:19:48 -0500\n+--\n+added: false\n+deleted: false\n+beforeName: src/events/http/HttpServer.js\n+afterName: src/events/http/HttpServer.js\n+--\n+| 473 | 473 |               request,\n+| 474 | 474 |               this.#serverless.service.provider.stage,\n+| 475 | 475 |               requestTemplate,\n+|     | 476 |+              _path,\n+| 476 | 477 |             ).create()\n+| 477 | 478 |           } catch (err) {\n+| 478 | 479 |             return this._reply500(\n+| 488 | 489 |         const lambdaProxyIntegrationEvent = new LambdaProxyIntegrationEvent(\n+| 489 | 490 |           request,\n+| 490 | 491 |           this.#serverless.service.provider.stage,\n+|     | 492 |+          _path,\n+| 491 | 493 |         )\n+| 492 | 494 | \n+| 493 | 495 |         event = lambdaProxyIntegrationEvent.create()\n+added: false\n+deleted: false\n+beforeName: src/events/http/lambda-events/LambdaIntegrationEvent.js\n+afterName: src/events/http/lambda-events/LambdaIntegrationEvent.js\n+--\n+|   2 |   2 | import VelocityContext from './VelocityContext.js'\n+|   3 |   3 | \n+|   4 |   4 | export default class LambdaIntegrationEvent {\n+|     |   5 |+  #path = null\n+|   5 |   6 |   #request = null\n+|   6 |   7 |   #requestTemplate = null\n+|   7 |   8 |   #stage = null\n+|   8 |   9 | \n+|   9 |     |-  constructor(request, stage, requestTemplate) {\n+|     |  10 |+  constructor(request, stage, requestTemplate, path) {\n+|     |  11 |+    this.#path = path\n+|  10 |  12 |     this.#request = request\n+|  11 |  13 |     this.#requestTemplate = requestTemplate\n+|  12 |  14 |     this.#stage = stage\n+|  17 |  19 |       this.#request,\n+|  18 |  20 |       this.#stage,\n+|  19 |  21 |       this.#request.payload || {},\n+|     |  22 |+      this.#path,\n+|  20 |  23 |     ).getContext()\n+|  21 |  24 | \n+|  22 |  25 |     const event = renderVelocityTemplateObject(\n+added: false\n+deleted: false\n+beforeName: src/events/http/lambda-events/LambdaProxyIntegrationEvent.js\n+afterName: src/events/http/lambda-events/LambdaProxyIntegrationEvent.js\n+--\n+|  16 |  16 | // https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html\n+|  17 |  17 | // http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-api-as-simple-proxy-for-lambda.html\n+|  18 |  18 | export default class LambdaProxyIntegrationEvent {\n+|     |  19 |+  #path = null\n+|  19 |  20 |   #request = null\n+|  20 |  21 |   #stage = null\n+|  21 |  22 | \n+|  22 |     |-  constructor(request, stage) {\n+|     |  23 |+  constructor(request, stage, path) {\n+|     |  24 |+    this.#path = path\n+|  23 |  25 |     this.#request = request\n+|  24 |  26 |     this.#stage = stage\n+|  25 |  27 |   }\n+| 106 | 108 |     const {\n+| 107 | 109 |       info: { received, remoteAddress },\n+| 108 | 110 |       method,\n+| 109 |     |-      path,\n+| 110 | 111 |     } = this.#request\n+| 111 | 112 | \n+| 112 | 113 |     const httpMethod = method.toUpperCase()\n+| 125 | 126 |       multiValueQueryStringParameters: parseMultiValueQueryStringParameters(\n+| 126 | 127 |         url,\n+| 127 | 128 |       ),\n+| 128 |     |-      path,\n+|     | 129 |+      path: this.#path,\n+| 129 | 130 |       pathParameters: nullIfEmpty(pathParams),\n+| 130 | 131 |       queryStringParameters: parseQueryStringParameters(url),\n+| 131 | 132 |       requestContext: {\n+| 170 | 171 |           userAgent: this.#request.headers['user-agent'] || '',\n+| 171 | 172 |           userArn: 'offlineContext_userArn',\n+| 172 | 173 |         },\n+| 173 |     |-        path: \\`/\\${this.#stage}\\${this.#request.route.path}\\`,\n+|     | 174 |+        path: this.#request.route.path,\n+| 174 | 175 |         protocol: 'HTTP/1.1',\n+| 175 | 176 |         requestId: createUniqueId(),\n+| 176 | 177 |         requestTime,\n+| 177 | 178 |         requestTimeEpoch,\n+| 178 | 179 |         resourceId: 'offlineContext_resourceId',\n+| 179 |     |-        resourcePath: this.#request.route.path,\n+|     | 180 |+        resourcePath: this.#path,\n+| 180 | 181 |         stage: this.#stage,\n+| 181 | 182 |       },\n+| 182 |     |-      resource: this.#request.route.path,\n+|     | 183 |+      resource: this.#path,\n+| 183 | 184 |       stageVariables: null,\n+| 184 | 185 |     }\n+| 185 | 186 |   }\n+added: false\n+deleted: false\n+beforeName: src/events/http/lambda-events/VelocityContext.js\n+afterName: src/events/http/lambda-events/VelocityContext.js\n+--\n+|  36 |  36 |   http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n+|  37 |  37 | */\n+|  38 |  38 | export default class VelocityContext {\n+|     |  39 |+  #path = null\n+|  39 |  40 |   #payload = null\n+|  40 |  41 |   #request = null\n+|  41 |  42 |   #stage = null\n+|  42 |  43 | \n+|  43 |     |-  constructor(request, stage, payload) {\n+|     |  44 |+  constructor(request, stage, payload, path) {\n+|     |  45 |+    this.#path = path\n+|  44 |  46 |     this.#payload = payload\n+|  45 |  47 |     this.#request = request\n+|  46 |  48 |     this.#stage = stage\n+| 106 | 108 |         },\n+| 107 | 109 |         requestId: createUniqueId(),\n+| 108 | 110 |         resourceId: 'offlineContext_resourceId',\n+| 109 |     |-        resourcePath: this.#request.route.path,\n+|     | 111 |+        resourcePath: this.#path,\n+| 110 | 112 |         stage: this.#stage,\n+| 111 | 113 |       },\n+| 112 | 114 |       input: {\n+    `.trim(),\n+  );\n+});\n+\n+test(\"parses a renaming patch\", () => {\n+  const patch = loadFixture(\"rename-file\");\n+\n+  expect(rerender(patch)).toEqual(\n+    `\n+hash: 68ec4bbde5244929afee1b39e09dced6fad1a725\n+message: [PATCH] Rename README\n+authorName: =?UTF-8?q?David=20H=C3=A9rault?=\n+authorEmail: dherault@gmail.com\n+date: Mon, 27 Jan 2020 17:35:01 +0100\n+--\n+added: false\n+deleted: false\n+beforeName: README.md\n+afterName: README.mdx\n+--\n+    `.trim(),\n+  );\n+});\n+\n+test(\"parses a add and delete patch\", () => {\n+  const patch = loadFixture(\"add-and-delete-file\");\n+\n+  expect(rerender(patch, 1)).toEqual(\n+    `\n+hash: 74d652cd9cda9849591d1c414caae0af23b19c8d\n+message: [PATCH] Rename and edit README\n+authorName: =?UTF-8?q?David=20H=C3=A9rault?=\n+authorEmail: dherault@gmail.com\n+date: Mon, 27 Jan 2020 17:36:29 +0100\n+--\n+added: false\n+deleted: true\n+beforeName: README.md\n+afterName: README.md\n+--\n+| 1 |   |-# stars-in-motion\n+| 2 |   |-\n+| 3 |   |-A canvas full of stars\n+added: true\n+deleted: false\n+beforeName: README.mdx\n+afterName: README.mdx\n+--\n+|   | 1 |+# stars-in-motion\n+|   | 2 |+\n+|   | 3 |+A canvas full of stars.\n+`.trim(),\n+  );\n+});\n+\n+test(\"parses a complex patch 2\", () => {\n+  parseGitPatch(data[\"complex.patch\"]);\n+});\n+\n+test(\"pases a patch with hyphen deletes\", () => {\n+  const patch = loadFixture(\"hlint-yaml\");\n+\n+  expect(rerender(patch, 2)).toEqual(\n+    `\n+hash: 89afcd42fb6f2602fbcd03d6e5573b1859347787\n+message: [PATCH 2/2] Restyled by prettier-yaml\n+authorName: \"Restyled.io\"\n+authorEmail: commits@restyled.io\n+date: Fri, 17 Jan 2025 18:09:56 +0000\n+--\n+added: false\n+deleted: false\n+beforeName: hlint/.hlint.yaml\n+afterName: hlint/.hlint.yaml\n+--\n+| 24 | 24 | # for ad hoc ways to suppress hlint.\n+| 25 | 25 | \n+| 26 | 26 | ---\n+| 27 |    |-\n+| 28 | 27 | # By default, everything is an error\n+| 29 |    |-- error: {name: \"\"}\n+|    | 28 |+- error: { name: \"\" }\n+| 30 | 29 | \n+| 31 | 30 | # Some things we don't care about at all\n+| 32 |    |-- ignore: {name: \"Use module export list\"}\n+`.trim(),\n+  );\n+});\n+\n+function loadFixture(name: string): Patch {\n+  const parsed = parseGitPatch(data[`${name}.patch`]);\n+\n+  if (!parsed) {\n+    throw new Error(`Fixture ${name} didn't parse as Patch`);\n+  }\n+\n+  return parsed;\n+}\n+\n+function rerender(patch: Patch, lineNumberWidth?: number): string {\n+  return [\n+    `hash: ${patch.hash}`,\n+    `message: ${patch.message}`,\n+    `authorName: ${patch.authorName}`,\n+    `authorEmail: ${patch.authorEmail}`,\n+    `date: ${patch.date}`,\n+    \"--\",\n+  ]\n+    .concat(\n+      patch.files.flatMap((file) => {\n+        return [\n+          `added: ${file.added}`,\n+          `deleted: ${file.deleted}`,\n+          `beforeName: ${file.beforeName}`,\n+          `afterName: ${file.afterName}`,\n+          \"--\",\n+        ].concat(\n+          file.modifiedLines.flatMap((line) => {\n+            return [`${renderLinePrefix(line, lineNumberWidth)}${line.line}`];\n+          }),\n+        );\n+      }),\n+    )\n+    .join(\"\\n\");\n+}\n+\n+function renderLinePrefix(line: PatchLine, lineNumberWidth?: number): string {\n+  const lwidth = lineNumberWidth ? lineNumberWidth : 3;\n+\n+  const padString = (x: string): string => {\n+    return String(x).padStart(lwidth, \" \");\n+  };\n+\n+  const padNumber = (x: number): string => {\n+    return padString(x.toString());\n+  };\n+\n+  switch (line.tag) {\n+    case \"added\":\n+      return `| ${padString(\"\")} | ${padNumber(line.addedLineNumber)} |+`;\n+    case \"removed\":\n+      return `| ${padNumber(line.removedLineNumber)} | ${padString(\"\")} |-`;\n+    case \"context\":\n+      return `| ${padNumber(line.removedLineNumber)} | ${padNumber(line.addedLineNumber)} | `;\n+  }\n+}"
  },
  {
    "sha": "b05717a2d6425d4ab69eaef3740ea9fdcd4cabb0",
    "filename": "run/src/parse-git-patch.ts",
    "status": "added",
    "additions": 217,
    "deletions": 0,
    "changes": 217,
    "blob_url": "https://github.com/restyled-io/actions/blob/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fsrc%2Fparse-git-patch.ts",
    "raw_url": "https://github.com/restyled-io/actions/raw/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fsrc%2Fparse-git-patch.ts",
    "contents_url": "https://api.github.com/repos/restyled-io/actions/contents/run%2Fsrc%2Fparse-git-patch.ts?ref=8672a7df4bc9edfea1ae062620328165196c11cf",
    "patch": "@@ -0,0 +1,217 @@\n+const hashRegex = /^From (\\S*)/;\n+const authorRegex = /^From:\\s?([^<].*[^>])?\\s+(<(.*)>)?/;\n+const fileNameRegex = /^diff --git \"?a\\/(.*)\"?\\s*\"?b\\/(.*)\"?/;\n+const fileLinesRegex = /^@@ -([0-9]*),?\\S* \\+([0-9]*),?/;\n+const similarityIndexRegex = /^similarity index /;\n+const addedFileModeRegex = /^new file mode /;\n+const deletedFileModeRegex = /^deleted file mode /;\n+\n+export type PatchLine =\n+  | { tag: \"added\"; addedLineNumber: number; line: string }\n+  | { tag: \"removed\"; removedLineNumber: number; line: string }\n+  | {\n+      tag: \"context\";\n+      addedLineNumber: number;\n+      removedLineNumber: number;\n+      line: string;\n+    };\n+\n+export type PatchFile = {\n+  added: boolean;\n+  deleted: boolean;\n+  beforeName: string;\n+  afterName: string;\n+  modifiedLines: PatchLine[];\n+};\n+\n+export type Patch = {\n+  hash?: string;\n+  authorName?: string;\n+  authorEmail?: string;\n+  date?: string;\n+  message?: string;\n+  files: PatchFile[];\n+};\n+\n+export function parseGitPatches(patches: string): Patch[] {\n+  const lines = patches.split(\"\\n\");\n+\n+  return splitIntoParts(lines, \"From \")\n+    .map((xs) => parseGitPatch(xs.join(\"\\n\")))\n+    .filter((x) => {\n+      return x;\n+    }) as Patch[];\n+}\n+\n+export function parseGitPatch(patch: string) {\n+  if (typeof patch !== \"string\") {\n+    throw new Error(\"Expected first argument (patch) to be a string\");\n+  }\n+\n+  const lines = patch.split(\"\\n\");\n+\n+  const gitPatchMetaInfo = splitMetaInfo(patch, lines);\n+\n+  if (!gitPatchMetaInfo) return null;\n+\n+  const parsedPatch: Patch = {\n+    ...gitPatchMetaInfo,\n+    files: [] as PatchFile[],\n+  };\n+\n+  splitIntoParts(lines, \"diff --git\").forEach((diff) => {\n+    const fileNameLine = diff.shift();\n+\n+    if (!fileNameLine) return;\n+\n+    const match3 = fileNameLine.match(fileNameRegex);\n+\n+    if (!match3) return;\n+\n+    const [, a, b] = match3;\n+    const metaLine = diff.shift();\n+\n+    if (!metaLine) return;\n+\n+    const fileData: PatchFile = {\n+      added: false,\n+      deleted: false,\n+      beforeName: a.trim(),\n+      afterName: b.trim(),\n+      modifiedLines: [],\n+    };\n+\n+    parsedPatch.files.push(fileData);\n+\n+    if (addedFileModeRegex.test(metaLine)) {\n+      fileData.added = true;\n+    }\n+    if (deletedFileModeRegex.test(metaLine)) {\n+      fileData.deleted = true;\n+    }\n+    if (similarityIndexRegex.test(metaLine)) {\n+      return;\n+    }\n+\n+    splitIntoParts(diff, \"@@ \").forEach((lines) => {\n+      const fileLinesLine = lines.shift();\n+\n+      if (!fileLinesLine) return;\n+\n+      const match4 = fileLinesLine.match(fileLinesRegex);\n+\n+      if (!match4) return;\n+\n+      const [, a, b] = match4;\n+\n+      let nA = parseInt(a);\n+      let nB = parseInt(b);\n+\n+      lines.forEach((line) => {\n+        if (line === \"-- \") {\n+          return;\n+        }\n+\n+        if (line.startsWith(\"+\")) {\n+          fileData.modifiedLines.push({\n+            tag: \"added\",\n+            addedLineNumber: nB,\n+            line: line.substring(1),\n+          });\n+\n+          nB++;\n+        } else if (line.startsWith(\"-\")) {\n+          fileData.modifiedLines.push({\n+            tag: \"removed\",\n+            removedLineNumber: nA,\n+            line: line.substring(1),\n+          });\n+\n+          nA++;\n+        } else if (line.startsWith(\" \")) {\n+          fileData.modifiedLines.push({\n+            tag: \"context\",\n+            addedLineNumber: nB,\n+            removedLineNumber: nA,\n+            line: line.substring(1),\n+          });\n+\n+          nA++;\n+          nB++;\n+        }\n+      });\n+    });\n+  });\n+\n+  return parsedPatch;\n+}\n+\n+function splitMetaInfo(patch: string, lines: string[]) {\n+  // Compatible with git output\n+  if (!/^From/g.test(patch)) {\n+    return {};\n+  }\n+\n+  const hashLine = lines.shift();\n+\n+  if (!hashLine) return null;\n+\n+  const match1 = hashLine.match(hashRegex);\n+\n+  if (!match1) return null;\n+\n+  const [, hash] = match1;\n+\n+  const authorLine = lines.shift();\n+\n+  if (!authorLine) return null;\n+\n+  const match2 = authorLine.match(authorRegex);\n+\n+  if (!match2) return null;\n+\n+  const [, authorName, , authorEmail] = match2;\n+\n+  const dateLine = lines.shift();\n+\n+  if (!dateLine) return null;\n+\n+  const [, date] = dateLine.split(\"Date: \");\n+\n+  const messageLine = lines.shift();\n+\n+  if (!messageLine) return null;\n+\n+  const [, message] = messageLine.split(\"Subject: \");\n+\n+  return {\n+    hash,\n+    authorName,\n+    authorEmail,\n+    date,\n+    message,\n+  };\n+}\n+\n+function splitIntoParts(lines: string[], separator: string) {\n+  const parts = [];\n+  let currentPart: string[] | undefined;\n+\n+  lines.forEach((line) => {\n+    if (line.startsWith(separator)) {\n+      if (currentPart) {\n+        parts.push(currentPart);\n+      }\n+\n+      currentPart = [line];\n+    } else if (currentPart) {\n+      currentPart.push(line);\n+    }\n+  });\n+\n+  if (currentPart) {\n+    parts.push(currentPart);\n+  }\n+\n+  return parts;\n+}"
  },
  {
    "sha": "7679ab7e382e5c9e1f56cf97b78864c2f9aea061",
    "filename": "run/src/patch.test.ts",
    "status": "removed",
    "additions": 0,
    "deletions": 158,
    "changes": 158,
    "blob_url": "https://github.com/restyled-io/actions/blob/600e9d919ad087ff97c944d39dd789cebc0c8c71/run%2Fsrc%2Fpatch.test.ts",
    "raw_url": "https://github.com/restyled-io/actions/raw/600e9d919ad087ff97c944d39dd789cebc0c8c71/run%2Fsrc%2Fpatch.test.ts",
    "contents_url": "https://api.github.com/repos/restyled-io/actions/contents/run%2Fsrc%2Fpatch.test.ts?ref=600e9d919ad087ff97c944d39dd789cebc0c8c71",
    "patch": "@@ -1,158 +0,0 @@\n-/* Copyright (C) 2024 Patrick Brisbin\n- *\n- * This program is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License, or\n- * (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n- */\n-import { parsePatches } from \"./patch\";\n-\n-describe(\"parsePatches\", () => {\n-  it(\"parses multi-patch\", () => {\n-    const patchStr = [\n-      \"From 2f6f88c98fff3afa0289f46bf4eab469f45eebc6 Mon Sep 17 00:00:00 2001\",\n-      \"From: A dev <a-dev@users.noreply.github.com>\",\n-      \"Date: Sat, 25 Jan 2020 19:21:35 +0200\",\n-      \"Subject: [PATCH] JSON stringify string responses\",\n-      \"\",\n-      \"---\",\n-      \" src/events/http/HttpServer.js | 4 +++-\",\n-      \" 1 file changed, 3 insertions(+), 1 deletion(-)\",\n-      \"\",\n-      \"diff --git a/src/events/http/HttpServer.js b/src/events/http/HttpServer.js\",\n-      \"index 20bf454..c0fdafb 100644\",\n-      \"--- a/src/events/http/HttpServer.js\",\n-      \"+++ b/src/events/http/HttpServer.js\",\n-      \"@@ -770,7 +770,9 @@ export default class HttpServer {\",\n-      \"           override: false,\",\n-      \"         })\",\n-      \"\",\n-      \"-        if (result && typeof result.body !== 'undefined') {\",\n-      \"+        if (typeof result === 'string') {\",\n-      \"+          response.source = JSON.stringify(result)\",\n-      \"+        } else if (result && typeof result.body !== 'undefined') {\",\n-      \"           if (result.isBase64Encoded) {\",\n-      \"             response.encoding = 'binary'\",\n-      \"             response.source = Buffer.from(result.body, 'base64')\",\n-      \"--\",\n-      \"2.21.1 (Apple Git-122.3)\",\n-      \"\",\n-      \"\",\n-      \"From 0f6f88c98fff3afa0289f46bf4eab469f45eebc6 Mon Sep 17 00:00:00 2001\",\n-      \"From: A dev <a-dev@users.noreply.github.com>\",\n-      \"Date: Sat, 25 Jan 2020 19:21:35 +0200\",\n-      \"Subject: [PATCH] Blah blah\",\n-      \"\",\n-      \"---\",\n-      \"diff --git a/suggestions/src/hunk.ts b/suggestions/src/hunk.ts\",\n-      \"new file mode 100644\",\n-      \"index 0000000..b295688\",\n-      \"--- /dev/null\",\n-      \"+++ b/suggestions/src/hunk.ts\",\n-      \"@@ -0,0 +1,61 @@\",\n-      '+import { type NonEmpty } from \"./non-empty\";',\n-      '+import * as NE from \"./non-empty\";',\n-      \"+\",\n-      \"+export interface HasLineNumber {\",\n-      \"+  lineNumber: number;\",\n-      \"+}\",\n-      \"+\",\n-      \"+export class Hunks<T> {\",\n-      \"+  private map: Map<number, NonEmpty<T & HasLineNumber>>;\",\n-      \"+  private lastHunk: number;\",\n-      \"+  private lastLine: number;\",\n-      \"+\",\n-      \"+  constructor() {\",\n-      \"+    this.map = new Map();\",\n-      \"+    this.lastHunk = -1;\",\n-      \"+    this.lastLine = -1;\",\n-      \"+  }\",\n-      \"+\",\n-      \"+  get(lineNumber: number): NonEmpty<T & HasLineNumber> | null { return this.map.get(lineNumber) || null; }\",\n-      \"+\",\n-      \"+  add(line: T & HasLineNumber) {\",\n-      \"+    const current = this.get(line.lineNumber);\",\n-      \"+    const sameLine = line.lineNumber == this.lastLine;\",\n-      \"+    const lastLine = line.lineNumber === this.lastLine + 1;\",\n-      \"+\",\n-      \"+    if (current && (sameLine || lastLine)) {\",\n-      \"+      NE.append(current, NE.singleton(line));\",\n-      \"+    } else {\",\n-      \"+      this.map.set(line.lineNumber, NE.singleton(line));\",\n-      \"+      this.lastHunk = line.lineNumber;\",\n-      \"+    }\",\n-      \"+\",\n-      \"+    this.lastLine = line.lineNumber;\",\n-      \"+  }\",\n-      \"+\",\n-      \"+  forEachHunkWithin(\",\n-      \"+    other: Hunks<T>,\",\n-      \"+    f: (hunk: NonEmpty<T & HasLineNumber>) => void,\",\n-      \"+  ): void {\",\n-      \"+    Array.from(this.map.values()).forEach((hunk) => {\",\n-      \"+      if (other.contains(hunk)) {\",\n-      \"+        f(hunk);\",\n-      \"+      }\",\n-      \"+    });\",\n-      \"+  }\",\n-      \"+\",\n-      \"+  contains(hunk: NonEmpty<T & HasLineNumber>) {\",\n-      \"+    return Array.from(this.map.values()).some((x) => {\",\n-      \"+      return (\",\n-      \"+        hunk.head.lineNumber >= x.head.lineNumber &&\",\n-      \"+        hunk.last.lineNumber <= x.last.lineNumber\",\n-      \"+      );\",\n-      \"+    });\",\n-      \"+  }\",\n-      \"+}\",\n-      \"+\",\n-      \"+export function build<T>(lines: (T & HasLineNumber)[]): Hunks<T> {\",\n-      \"+  const hunks: Hunks<T> = new Hunks();\",\n-      \"+  lines.forEach((line) => hunks.add(line));\",\n-      \"+  return hunks;\",\n-      \"+}\",\n-    ].join(\"\\n\");\n-\n-    const parsed = parsePatches(patchStr);\n-\n-    expect(parsed.length).toEqual(2);\n-    expect(parsed.map((p) => p.hash)).toEqual([\n-      \"2f6f88c98fff3afa0289f46bf4eab469f45eebc6\",\n-      \"0f6f88c98fff3afa0289f46bf4eab469f45eebc6\",\n-    ]);\n-    expect(parsed.map((p) => p.message)).toEqual([\n-      \"[PATCH] JSON stringify string responses\",\n-      \"[PATCH] Blah blah\",\n-    ]);\n-    expect(parsed.flatMap((p) => p.files.map((f) => f.afterName))).toEqual([\n-      \"src/events/http/HttpServer.js\",\n-      \"suggestions/src/hunk.ts\",\n-    ]);\n-    expect(\n-      parsed.map((p) => {\n-        return p.files.map((f) => {\n-          return f.modifiedLines.map((l) => {\n-            return l.lineNumber;\n-          });\n-        });\n-      }),\n-    ).toEqual([[[773].concat(range(773, 3)).concat([777])], [range(1, 61)]]);\n-  });\n-});\n-\n-/* range(5, 3) => [5, 6, 7] */\n-function range(begin: number, len: number): number[] {\n-  return Array(len)\n-    .fill(0)\n-    .map((_: number, index: number) => {\n-      return index + begin;\n-    });\n-}"
  },
  {
    "sha": "3136e05f9d7fc0613d07138ee5dc5ca70b7aa5d1",
    "filename": "run/src/pull-request.ts",
    "status": "modified",
    "additions": 14,
    "deletions": 34,
    "changes": 48,
    "blob_url": "https://github.com/restyled-io/actions/blob/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fsrc%2Fpull-request.ts",
    "raw_url": "https://github.com/restyled-io/actions/raw/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fsrc%2Fpull-request.ts",
    "contents_url": "https://api.github.com/repos/restyled-io/actions/contents/run%2Fsrc%2Fpull-request.ts?ref=8672a7df4bc9edfea1ae062620328165196c11cf",
    "patch": "@@ -30,9 +30,14 @@ export type PullRequest = {\n   headSha: string;\n   restyleArgs: string[];\n   restyleDiffBase: DiffBase;\n-  diff: string | null;\n+  files: PullRequestFile[];\n };\n \n+export interface PullRequestFile {\n+  filename: string;\n+  patch?: string;\n+}\n+\n export type DiffBase = { tag: \"unknown\" } | { tag: \"known\"; sha: string };\n \n export async function getPullRequest(\n@@ -60,11 +65,14 @@ export async function getPullRequest(\n   const pullRequestJson = temp.path({ suffix: \".json\" });\n   fs.writeFileSync(pullRequestJson, JSON.stringify(pr));\n \n+  const files = await client.paginate(client.rest.pulls.listFiles, {\n+    ...github.context.repo,\n+    pull_number: pr.number,\n+  });\n+\n   // Respect paths if given, otherwise pull PR changed files\n   const restylePaths =\n-    paths.length === 0 ? await getPullRequestPaths(client, pr.number) : paths;\n-\n-  const diff = await getPullRequestDiff(client, pr.number);\n+    paths.length === 0 ? files.map((f) => f.filename) : paths;\n \n   return {\n     number: pr.number,\n@@ -73,7 +81,7 @@ export async function getPullRequest(\n     headSha: pr.head.sha,\n     restyleArgs: [\"--pull-request-json\", pullRequestJson].concat(restylePaths),\n     restyleDiffBase: base,\n-    diff,\n+    files,\n   };\n }\n \n@@ -85,38 +93,10 @@ function fakePullRequest(base: DiffBase, paths: string[]): PullRequest {\n     headSha: \"unknown\",\n     restyleArgs: paths,\n     restyleDiffBase: base,\n-    diff: null,\n+    files: [],\n   };\n }\n \n-async function getPullRequestPaths(\n-  client: GitHubClient,\n-  number: number,\n-): Promise<string[]> {\n-  const files = await client.paginate(client.rest.pulls.listFiles, {\n-    ...github.context.repo,\n-    pull_number: number,\n-  });\n-\n-  return files.map((f) => f.filename);\n-}\n-\n-async function getPullRequestDiff(\n-  client: GitHubClient,\n-  number: number,\n-): Promise<string> {\n-  const response = await client.rest.pulls.get({\n-    ...github.context.repo,\n-    pull_number: number,\n-    mediaType: {\n-      format: \"patch\",\n-    },\n-  });\n-\n-  // Custom mediatype is not expected by octokit types\n-  return response.data as unknown as string;\n-}\n-\n async function getDiffBase(): Promise<DiffBase> {\n   try {\n     const sha = await readProcess(\"git\", [\"rev-parse\", \"HEAD\"]);"
  },
  {
    "sha": "b035a754ac051aa1a3efafc9596511e260a214bb",
    "filename": "run/src/suggest.ts",
    "status": "added",
    "additions": 121,
    "deletions": 0,
    "changes": 121,
    "blob_url": "https://github.com/restyled-io/actions/blob/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fsrc%2Fsuggest.ts",
    "raw_url": "https://github.com/restyled-io/actions/raw/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fsrc%2Fsuggest.ts",
    "contents_url": "https://api.github.com/repos/restyled-io/actions/contents/run%2Fsrc%2Fsuggest.ts?ref=8672a7df4bc9edfea1ae062620328165196c11cf",
    "patch": "@@ -0,0 +1,121 @@\n+import { groupBy } from \"./list\";\n+import { NonEmpty, nonEmpty } from \"./non-empty\";\n+import * as NE from \"./non-empty\";\n+import { PatchLine, parseGitPatches } from \"./parse-git-patch\";\n+import { PullRequestFile } from \"./pull-request\";\n+\n+export type Suggestion = {\n+  path: string;\n+  description: string;\n+  code: string[];\n+  startLine: number;\n+  endLine: number;\n+  skipReason?: string;\n+};\n+\n+export function suggest(\n+  baseFiles: PullRequestFile[],\n+  resolved: Suggestion[],\n+  patch: string,\n+): Suggestion[] {\n+  const patches = parseGitPatches(patch);\n+\n+  return patches.flatMap((patch) => {\n+    return patch.files.flatMap((file) => {\n+      const groups = groupBy(file.modifiedLines, (a, b) => {\n+        return a.tag === b.tag || (a.tag === \"removed\" && b.tag === \"added\");\n+      });\n+\n+      return groups.flatMap((group) => {\n+        const removed = getRemoveLineNumbers(group);\n+\n+        if (!removed) {\n+          return {\n+            path: file.afterName,\n+            description: (patch.message ?? \"\").replace(/\\[PATCH.*] /, \"\"),\n+            code: getAddedLines(group),\n+            startLine: 0,\n+            endLine: 0,\n+            skipReason: \"suggestion removed no lines\",\n+          };\n+        }\n+\n+        const suggestion: Suggestion = {\n+          path: file.afterName,\n+          description: (patch.message ?? \"\").replace(/\\[PATCH.*] /, \"\"),\n+          code: getAddedLines(group),\n+          startLine: NE.head(removed),\n+          endLine: NE.last(removed),\n+        };\n+\n+        if (!isOnAddedLines(baseFiles, suggestion)) {\n+          suggestion.skipReason = \"suggestions can only be made on added lines\";\n+        }\n+\n+        if (resolved.some((r) => isSameLocation(r, suggestion))) {\n+          suggestion.skipReason = \"previously marked resolved\";\n+        }\n+\n+        return suggestion;\n+      });\n+    });\n+  });\n+}\n+\n+function getRemoveLineNumbers(lines: PatchLine[]): NonEmpty<number> | null {\n+  const acc: number[] = [];\n+\n+  lines.forEach((line) => {\n+    if (line.tag === \"removed\") {\n+      acc.push(line.removedLineNumber);\n+    }\n+  });\n+\n+  return nonEmpty(acc);\n+}\n+\n+function getAddedLines(lines: PatchLine[]): string[] {\n+  const acc: string[] = [];\n+\n+  lines.forEach((line) => {\n+    if (line.tag === \"added\") {\n+      acc.push(line.line);\n+    }\n+  });\n+\n+  return acc;\n+}\n+\n+function isOnAddedLines(\n+  baseFiles: PullRequestFile[],\n+  suggestion: Suggestion,\n+): boolean {\n+  return true;\n+\n+  // const matched: PatchLine[] = [];\n+  // const suggestionSize = s.endLine - s.startLine + 1;\n+\n+  // patches.forEach((patch) => {\n+  //   patch.files.forEach((file) => {\n+  //     if (file.afterName === s.path) {\n+  //       for (let i = s.startLine; i <= s.endLine; i++) {\n+  //         const line = file.modifiedLines.find((line) => {\n+  //           return line.tag === \"added\" && line.addedLineNumber === i;\n+  //         });\n+\n+  //         if (line) {\n+  //           matched.push(line);\n+  //         }\n+  //       }\n+  //     }\n+  //   });\n+  // });\n+\n+  // return matched.length == suggestionSize;\n+}\n+\n+function isSameLocation(a: Suggestion, b: Suggestion): boolean {\n+  return (\n+    a.path === b.path && a.startLine == b.startLine && a.endLine == b.endLine\n+  );\n+}"
  },
  {
    "sha": "5194f41cbce20e66704f479e6ab2a690f362a922",
    "filename": "run/src/suggestions.test.ts",
    "status": "modified",
    "additions": 102,
    "deletions": 39,
    "changes": 141,
    "blob_url": "https://github.com/restyled-io/actions/blob/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fsrc%2Fsuggestions.test.ts",
    "raw_url": "https://github.com/restyled-io/actions/raw/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fsrc%2Fsuggestions.test.ts",
    "contents_url": "https://api.github.com/repos/restyled-io/actions/contents/run%2Fsrc%2Fsuggestions.test.ts?ref=8672a7df4bc9edfea1ae062620328165196c11cf",
    "patch": "@@ -13,34 +13,26 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n  */\n-import {\n-  type ParsedPatchType,\n-  type ParsedPatchFileDataType,\n-  type ParsedPatchModifiedLineType,\n-} from \"parse-git-patch\";\n-\n-import { type Suggestion, getSuggestions } from \"./suggestions\";\n+import { Patch, PatchFile, PatchLine } from \"./parse-git-patch\";\n+import { Suggestion, getSuggestions } from \"./suggestions\";\n \n type TestCase = {\n   name: string;\n-  bases: ParsedPatchType[];\n-  patches: ParsedPatchType[];\n+  bases: Patch[];\n+  patches: Patch[];\n   suggestions: Suggestion[];\n };\n \n function testCase(\n   name: string,\n-  bases: ParsedPatchType[],\n-  patches: ParsedPatchType[],\n+  bases: Patch[],\n+  patches: Patch[],\n   suggestions: Suggestion[],\n ): TestCase {\n   return { name, bases, patches, suggestions };\n }\n \n-function patch(\n-  message: string,\n-  files: ParsedPatchFileDataType[],\n-): ParsedPatchType {\n+function patch(message: string, files: PatchFile[]): Patch {\n   return {\n     hash: \"<some hash>\",\n     date: \"<some date>\",\n@@ -51,8 +43,8 @@ function patch(\n   };\n }\n \n-function patchFile(name: string, diff: string): ParsedPatchFileDataType {\n-  const modifiedLines: ParsedPatchModifiedLineType[] = [];\n+function patchFile(name: string, diff: string): PatchFile {\n+  const modifiedLines: PatchLine[] = [];\n \n   diff\n     .split(\"\\n\")\n@@ -67,16 +59,16 @@ function patchFile(name: string, diff: string): ParsedPatchFileDataType {\n         return;\n       }\n \n-      const modifiedLine =\n+      const modifiedLine: PatchLine =\n         beforeLine !== \"\"\n           ? {\n-              added: false,\n-              lineNumber: parseInt(beforeLine, 10),\n+              tag: \"removed\",\n+              removedLineNumber: parseInt(beforeLine, 10),\n               line: line.join(\"|\"),\n             }\n           : {\n-              added: true,\n-              lineNumber: parseInt(afterLine, 10),\n+              tag: \"added\",\n+              addedLineNumber: parseInt(afterLine, 10),\n               line: line.join(\"|\"),\n             };\n \n@@ -98,7 +90,7 @@ const cases: TestCase[] = [\n     [\n       patch(\"JSON stringify string responses\", [\n         patchFile(\n-          \"src/events/http/HttpServer.js\",\n+          \"src/events/http/File1.js\",\n           `\n             774|   |        if (result && typeof result.body !== 'undefined') {\n                |774|        if (typeof result === 'string') {\n@@ -111,7 +103,7 @@ const cases: TestCase[] = [\n     [\n       patch(\"Restyled by prettier\", [\n         patchFile(\n-          \"src/events/http/HttpServer.js\",\n+          \"src/events/http/File1.js\",\n           `\n             775|   |          response.source = JSON.stringify(result)\n                |775|          response.source = JSON.stringify(result);\n@@ -121,7 +113,7 @@ const cases: TestCase[] = [\n     ],\n     [\n       {\n-        path: \"src/events/http/HttpServer.js\",\n+        path: \"src/events/http/File1.js\",\n         description: \"Restyled by prettier\",\n         startLine: 775,\n         endLine: 775,\n@@ -275,7 +267,7 @@ const cases: TestCase[] = [\n     [\n       patch(\"Update Foo\", [\n         patchFile(\n-          \"Foo.hs\",\n+          \"Foo2.hs\",\n           `\n           1|1|\n           2| | setRequestBody\n@@ -290,7 +282,7 @@ const cases: TestCase[] = [\n     [\n       patch(\"Restyled by fourmolu\", [\n         patchFile(\n-          \"Foo.hs\",\n+          \"Foo2.hs\",\n           `\n           1|1|\n           2| | setRequestBody $\n@@ -302,33 +294,106 @@ const cases: TestCase[] = [\n     ],\n     [\n       {\n-        path: \"Foo.hs\",\n+        path: \"Foo2.hs\",\n         startLine: 2,\n         endLine: 3,\n         description: \"Restyled by fourmolu\",\n         code: [],\n       },\n     ],\n   ),\n+  testCase(\n+    \"Skipped on non-added file\",\n+    [\n+      patch(\"JSON stringify string responses\", [\n+        patchFile(\n+          \"src/events/http/File3.js\",\n+          `\n+            773|773|        # mispelt\n+            774|   |        if (result && typeof result.body !== 'undefined') {\n+               |774|        if (typeof result === 'string') {\n+               |775|          response.source = JSON.stringify(result)\n+               |776|        } else if (result && typeof result.body !== 'undefined') {\n+          `,\n+        ),\n+      ]),\n+    ],\n+    [\n+      patch(\"Restyled by spelling\", [\n+        patchFile(\n+          \"src/events/http/Other2.js\",\n+          `\n+            12|  | # from\n+              |12| # to\n+          `,\n+        ),\n+      ]),\n+    ],\n+    [\n+      {\n+        path: \"src/events/http/Other2.js\",\n+        description: \"Restyled by spelling\",\n+        startLine: 12,\n+        endLine: 12,\n+        code: [\" # to\"],\n+        skipReason: \"suggestions can only be made on added lines\",\n+      },\n+    ],\n+  ),\n+  testCase(\n+    \"Skipped on non-added line\",\n+    [\n+      patch(\"JSON stringify string responses\", [\n+        patchFile(\n+          \"src/events/http/File4.js\",\n+          `\n+            773|773|        # mispelt\n+            774|   |        if (result && typeof result.body !== 'undefined') {\n+               |774|        if (typeof result === 'string') {\n+               |775|          response.source = JSON.stringify(result)\n+               |776|        } else if (result && typeof result.body !== 'undefined') {\n+          `,\n+        ),\n+      ]),\n+    ],\n+    [\n+      patch(\"Restyled by spelling\", [\n+        patchFile(\n+          \"src/events/http/File4.js\",\n+          `\n+            773|   |       # mispelt\n+               |773|       # mispelled\n+          `,\n+        ),\n+      ]),\n+    ],\n+    [\n+      {\n+        path: \"src/events/http/File4.js\",\n+        description: \"Restyled by spelling\",\n+        startLine: 773,\n+        endLine: 773,\n+        code: [\"       # mispelled\"],\n+        skipReason: \"suggestions can only be made on added lines\",\n+      },\n+    ],\n+  ),\n ];\n \n describe(\"getSuggestions\", () => {\n   test.each(cases)(\"$name\", ({ bases, patches, suggestions }) => {\n-    const actual = getSuggestions(bases, patches, []).filter((x) => {\n-      return !x.skipReason;\n-    });\n-\n+    const actual = getSuggestions(bases, patches, []);\n     expect(actual).toEqual(suggestions);\n   });\n \n   test.each(cases)(\"$name (resolved)\", ({ bases, patches, suggestions }) => {\n-    const includingSkipped = getSuggestions(bases, patches, suggestions);\n-    const actual = includingSkipped.filter((x) => {\n+    const actual = getSuggestions(bases, patches, suggestions);\n+    const notSkipped = actual.filter((x) => {\n       return !x.skipReason;\n     });\n \n-    expect(actual).toEqual([]);\n-    expect(includingSkipped.map((x) => x.skipReason)).toEqual(\n+    expect(notSkipped).toEqual([]);\n+    expect(actual.map((x) => x.skipReason)).toEqual(\n       suggestions.map(() => {\n         return `previously marked resolved`;\n       }),\n@@ -339,10 +404,8 @@ describe(\"getSuggestions\", () => {\n     const bases = cases.flatMap((c) => c.bases);\n     const patches = cases.flatMap((c) => c.patches);\n     const suggestions = cases.flatMap((c) => c.suggestions);\n-\n     const actual = getSuggestions(bases, patches, []);\n-\n-    expect(actual.length).toEqual(4);\n+    expect(actual.length).toEqual(cases.length);\n     expect(actual).toEqual(suggestions);\n   });\n });"
  },
  {
    "sha": "3a23af6d76e4bce7b05e6248eeb72bed30576ffa",
    "filename": "run/src/suggestions.ts",
    "status": "modified",
    "additions": 74,
    "deletions": 54,
    "changes": 128,
    "blob_url": "https://github.com/restyled-io/actions/blob/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fsrc%2Fsuggestions.ts",
    "raw_url": "https://github.com/restyled-io/actions/raw/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fsrc%2Fsuggestions.ts",
    "contents_url": "https://api.github.com/repos/restyled-io/actions/contents/run%2Fsrc%2Fsuggestions.ts?ref=8672a7df4bc9edfea1ae062620328165196c11cf",
    "patch": "@@ -13,90 +13,110 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n  */\n-import { type ParsedPatchType } from \"parse-git-patch\";\n-\n-import { Hunks } from \"./hunk\";\n+import { groupBy } from \"./list\";\n+import { NonEmpty, nonEmpty } from \"./non-empty\";\n import * as NE from \"./non-empty\";\n+import { Patch, PatchLine } from \"./parse-git-patch\";\n \n export type Suggestion = {\n   path: string;\n   description: string;\n+  code: string[];\n   startLine: number;\n   endLine: number;\n-  code: string[];\n   skipReason?: string;\n };\n \n export function getSuggestions(\n-  bases: ParsedPatchType[],\n-  patches: ParsedPatchType[],\n+  bases: Patch[],\n+  patches: Patch[],\n   resolved: Suggestion[],\n ): Suggestion[] {\n   const suggestions: Suggestion[] = [];\n-  const baseFiles = bases.flatMap((p) => p.files);\n \n   patches.forEach((patch) => {\n     patch.files.forEach((file) => {\n-      const baseFile = baseFiles.find((x) => x.afterName === file.afterName);\n-\n-      if (!baseFile) {\n-        suggestions.push({\n-          path: file.afterName,\n-          description: (patch.message || \"\").replace(/^\\[PATCH] /, \"\"),\n-          startLine: 0,\n-          endLine: 0,\n-          code: [],\n-          skipReason: `Restyled file ${file.afterName} was not changed in the PR`,\n-        });\n-        return;\n-      }\n+      const groups = groupBy(file.modifiedLines, (a, b) => {\n+        return a.tag === b.tag || (a.tag === \"removed\" && b.tag === \"added\");\n+      });\n \n-      const baseAdds = new Hunks(baseFile.modifiedLines.filter((x) => x.added));\n-      const dels = new Hunks(file.modifiedLines.filter((x) => !x.added));\n-      const adds = new Hunks(file.modifiedLines.filter((x) => x.added));\n+      groups.forEach((group: PatchLine[]) => {\n+        const removed = getRemoveLineNumbers(group);\n \n-      dels.forEach((del) => {\n-        const line = NE.head(del).lineNumber;\n-        const add = adds.get(line);\n-        const mkSkipped = (skipReason: string): Suggestion => {\n-          return {\n+        if (removed) {\n+          const suggestion: Suggestion = {\n             path: file.afterName,\n-            description: (patch.message || \"\").replace(/^\\[PATCH] /, \"\"),\n-            startLine: NE.head(del).lineNumber,\n-            endLine: NE.last(del).lineNumber,\n-            code: [],\n-            skipReason,\n+            description: (patch.message ?? \"\").replace(/\\[PATCH.*] /, \"\"),\n+            code: getAddedLines(group),\n+            startLine: NE.head(removed),\n+            endLine: NE.last(removed),\n           };\n-        };\n-\n-        const suggestion: Suggestion = {\n-          path: file.afterName,\n-          description: (patch.message || \"\").replace(/^\\[PATCH] /, \"\"),\n-          startLine: NE.head(del).lineNumber,\n-          endLine: NE.last(del).lineNumber,\n-          code: add ? NE.toList(add).map((x) => x.line) : [],\n-        };\n-\n-        if (!baseAdds.contain(del)) {\n-          suggestions.push(\n-            mkSkipped(`suggestions can only be made on added lines`),\n-          );\n-          return;\n-        }\n \n-        if (resolved.some((r) => isSameLocation(r, suggestion))) {\n-          suggestions.push(mkSkipped(`previously marked resolved`));\n-          return;\n-        }\n+          if (!isAddedInDiff(bases, suggestion)) {\n+            suggestion.skipReason =\n+              \"suggestions can only be made on added lines\";\n+          }\n+\n+          if (resolved.some((r) => isSameLocation(r, suggestion))) {\n+            suggestion.skipReason = \"previously marked resolved\";\n+          }\n \n-        suggestions.push(suggestion);\n+          suggestions.push(suggestion);\n+        }\n       });\n     });\n   });\n \n   return suggestions;\n }\n \n+function getRemoveLineNumbers(lines: PatchLine[]): NonEmpty<number> | null {\n+  const acc: number[] = [];\n+\n+  lines.forEach((line) => {\n+    if (line.tag === \"removed\") {\n+      acc.push(line.removedLineNumber);\n+    }\n+  });\n+\n+  return nonEmpty(acc);\n+}\n+\n+function getAddedLines(lines: PatchLine[]): string[] {\n+  const acc: string[] = [];\n+\n+  lines.forEach((line) => {\n+    if (line.tag === \"added\") {\n+      acc.push(line.line);\n+    }\n+  });\n+\n+  return acc;\n+}\n+\n+function isAddedInDiff(patches: Patch[], s: Suggestion): boolean {\n+  const matched: PatchLine[] = [];\n+  const suggestionSize = s.endLine - s.startLine + 1;\n+\n+  patches.forEach((patch) => {\n+    patch.files.forEach((file) => {\n+      if (file.afterName === s.path) {\n+        for (let i = s.startLine; i <= s.endLine; i++) {\n+          const line = file.modifiedLines.find((line) => {\n+            return line.tag === \"added\" && line.addedLineNumber === i;\n+          });\n+\n+          if (line) {\n+            matched.push(line);\n+          }\n+        }\n+      }\n+    });\n+  });\n+\n+  return matched.length == suggestionSize;\n+}\n+\n function isSameLocation(a: Suggestion, b: Suggestion): boolean {\n   return (\n     a.path === b.path && a.startLine == b.startLine && a.endLine == b.endLine"
  },
  {
    "sha": "f22f005717843616585f391984f17019ba472f09",
    "filename": "run/yarn.lock",
    "status": "modified",
    "additions": 0,
    "deletions": 5,
    "changes": 5,
    "blob_url": "https://github.com/restyled-io/actions/blob/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fyarn.lock",
    "raw_url": "https://github.com/restyled-io/actions/raw/8672a7df4bc9edfea1ae062620328165196c11cf/run%2Fyarn.lock",
    "contents_url": "https://api.github.com/repos/restyled-io/actions/contents/run%2Fyarn.lock?ref=8672a7df4bc9edfea1ae062620328165196c11cf",
    "patch": "@@ -2779,11 +2779,6 @@ parent-module@^1.0.0:\n   dependencies:\n     callsites \"^3.0.0\"\n \n-parse-git-patch@^2.0.0:\n-  version \"2.0.0\"\n-  resolved \"https://registry.yarnpkg.com/parse-git-patch/-/parse-git-patch-2.0.0.tgz#8d63c01daeb795e6447f8ed5b37681558598680b\"\n-  integrity sha512-dG79wuJ/fezufoTJyCHxrzjrsmB1NGEIE9x1/c+9TPYAqSZvdB6KJqJO8W487BB6uq5HVT+SmjE0C8VbcV16eA==\n-\n parse-json@^5.2.0:\n   version \"5.2.0\"\n   resolved \"https://registry.yarnpkg.com/parse-json/-/parse-json-5.2.0.tgz#c76fc66dee54231c962b22bcc8a72cf2f99753cd\""
  }
]
