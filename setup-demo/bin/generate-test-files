#!/usr/bin/env ruby
# Copyright (C) 2024 Patrick Brisbin
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
require "optparse"
require "yaml"
require "logger"

LOGGER = Logger.new($stdout)
LOGGER.level = Logger::INFO

module Generate
  class RestylersYaml
    attr_reader :restylers

    def self.load(file)
      new(YAML.safe_load_file(file))
    end

    def initialize(yaml)
      @restylers = yaml.map { Restyler.new(_1) }
    end

    def limit!(n)
      @restylers = restylers.shuffle.take(n)
    end

    def filter!(names)
      @restylers = restylers.select { names.include?(_1.name) }
    end
  end

  class Restyler
    attr_reader :name

    def initialize(yaml)
      @name = yaml.fetch("name")
      @includes = yaml.fetch("include")
      @tests = yaml.fetch("metadata").fetch("tests").map { Test.new(_1) }
    end

    def test_files
      tests.flat_map.with_index do |test, idx|
        [test_file(test, idx), test.support].compact
      end
    end

    def config_restyler_yaml
      {
        "name" => name,
        "enabled" => true,
        "include" => ["#{name}-test-*"]
      }
    end

    private

    attr_reader :includes, :tests

    def test_file(test, idx)
      ext = test.extension || infer_extension || "tmp"
      TestFile.new("#{name}-test-#{idx}.#{ext}", test.contents)
    end

    def infer_extension
      include = includes.find do |x|
        !x.start_with?("!") && x.include?(".")
      end

      include&.sub(/.*\.([^.]+)$/, '\1')
    end
  end

  class Test
    attr_reader :contents, :extension, :support

    def initialize(yaml)
      @contents = yaml.fetch("contents")
      @extension = yaml.fetch("extension")

      if (support = yaml["support"])
        @support = TestFile.new(
          support.fetch("path"),
          support.fetch("contents")
        )
      end
    end
  end

  class TestFile
    @@written = 0

    def self.written
      @@written
    end

    def initialize(path, contents)
      @path = path
      @contents = contents
    end

    def write(dry_run = false)
      LOGGER.info(path)

      unless dry_run
        File.write(path, contents)
      end

      @@written += 1
    end

    private

    attr_reader :path, :contents
  end

  class Main
    def self.run
      options = Options.parse!
      yaml = RestylersYaml.load(options.manifest)

      options.limit && yaml.limit!(options.limit)
      options.filter && yaml.filter!(options.filter)

      yaml.restylers.each do |restyler|
        restyler.test_files.each do |test_file|
          test_file.write(options.dry_run)
        end
      end

      restyled_yaml = TestFile.new(
        ".restyled.yaml",
        YAML.dump({
          "also_exclude" => ["./.git/**/*"],
          "restylers_version" => options.channel,
          "restylers" => yaml.restylers.map(&:config_restyler_yaml)
        })
      )

      restyled_yaml.write(options.dry_run)

      LOGGER.info("#{TestFile.written} test file(s) written")
    end
  end

  class Options
    CHANNEL_REGEX = /^(.*\/)?restylers-([^.]+)\.ya?ml$/

    attr_accessor :manifest, :channel, :limit, :filter, :dry_run

    def initialize
      @manifest = "/tmp/restylers-dev.yaml"
      @channel = "dev"
      @limit = nil
      @filter = nil
      @dry_run = false
    end

    def self.parse!
      options = new
      parser = OptionParser.new do |opts|
        opts.banner = "Usage: generate-test-files [options]"

        opts.on("-m", "--manifest PATH", "Run verbosely") do |m|
          options.manifest = m

          if CHANNEL_REGEX.match?(m)
            options.channel = m.sub(CHANNEL_REGEX, '\2')
          end
        end

        opts.on("-c", "--channel NAME", "Use the given channel name in .restyled.yaml") do |c|
          options.channel = c
        end

        opts.on("-l", "--limit N", Integer, "Generate for N (random) Restylers") do |l|
          options.limit = l
        end

        opts.on("-f", "--filter name,name", Array, "Filter to the given (comma-separated) Restylers") do |f|
          options.filter = f
        end

        opts.on("-d", "--[no-]dry-run", "Don't actually write files") do |d|
          options.dry_run = d
        end

        opts.on("-v", "--[no-]verbose", "Log verbosely") do |d|
          LOGGER.level = Logger::DEBUG
        end
      end

      parser.parse!

      LOGGER.debug(options)

      options
    end
  end
end

Generate::Main.run
